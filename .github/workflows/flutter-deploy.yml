#
# CI/CD Pipeline Structure (Mermaid Diagram)
#
# ```mermaid
# flowchart TD
#   %% Phase 1: Three separate matrices (run in parallel)
#   subgraph VersionMatrix["üß± Version Matrix"]
#     VERSION_SETUP["Version Setup üìã"]
#   end
#
#   subgraph ParseMatrix["üîç Parse Matrix"]
#     PARSE_COMMIT["Parse Commit üìù"]
#   end
#
#   subgraph SecretsMatrix["üîê Secrets Matrix"]
#     VALIDATE_SECRETS["Validate Secrets üîë"]
#   end
#
#   %% Phase 2: Three matrices with subtasks
#   subgraph PatchMatrix["üèñÔ∏è Patch Matrix"]
#     PATCH_ANDROID["Patch Android ü§ñ"]
#     PATCH_IOS["Patch iOS üçè"]
#   end
#
#   subgraph ReleaseMatrix["üöÄ Release Matrix"]
#     RELEASE_ANDROID["Release Android üöÄü§ñ"]
#     RELEASE_IOS["Release iOS üöÄüçè"]
#   end
#
#   subgraph StandardMatrix["üì¶ Standard Matrix"]
#     BUILD_APK["Build APK üì±"]
#     BUILD_IPA["Build IPA üçé"]
#   end
#
#   %% Phase 3: Pipeline Status
#   PIPELINE_STATUS["üìä Pipeline Status"]
#
#   %% Flow: All Phase 1 matrices must complete before any Phase 2 matrix starts
#   VersionMatrix --> PatchMatrix
#   VersionMatrix --> ReleaseMatrix
#   VersionMatrix --> StandardMatrix
#
#   ParseMatrix --> PatchMatrix
#   ParseMatrix --> ReleaseMatrix
#   ParseMatrix --> StandardMatrix
#
#   SecretsMatrix --> PatchMatrix
#   SecretsMatrix --> ReleaseMatrix
#   SecretsMatrix --> StandardMatrix
#
#   %% All Phase 2 matrices feed into final status
#   PatchMatrix --> PIPELINE_STATUS
#   ReleaseMatrix --> PIPELINE_STATUS
#   StandardMatrix --> PIPELINE_STATUS
# ```
#
name: üöÄ Flutter CI/CD Pipeline with Shorebird

# üöÄ CI/CD Pipeline Flow - Three Phase Structure
# PHASE 1: Three separate matrices (run in parallel)
#        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
#        ‚îÇ   üß± Version       ‚îÇ   ‚îÇ   üîç Parse         ‚îÇ   ‚îÇ üîê Secrets           ‚îÇ
#        ‚îÇ     Matrix         ‚îÇ   ‚îÇ     Matrix         ‚îÇ   ‚îÇ   Matrix             ‚îÇ
#        ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ   ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ   ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
#        ‚îÇ ‚îÇ Version Setup  ‚îÇ ‚îÇ   ‚îÇ ‚îÇ Parse Commit   ‚îÇ ‚îÇ   ‚îÇ ‚îÇ Validate Secrets ‚îÇ ‚îÇ
#        ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ   ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ   ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
#        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
#                  ‚îÇ                        ‚îÇ                        ‚îÇ
#                  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
#                               ‚îÇ                        ‚îÇ
#                               ‚ñº                        ‚ñº
# PHASE 2: Three matrices with subtasks (run in parallel after Phase 1)
#        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
#        ‚îÇ      üèñÔ∏è Patch Matrix          ‚îÇ ‚îÇ     üöÄ Release Matrix       ‚îÇ ‚îÇ     üì¶ Standard Matrix        ‚îÇ
#        ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
#        ‚îÇ ‚îÇ Patch      ‚îÇ Patch      ‚îÇ   ‚îÇ ‚îÇ ‚îÇ Release    ‚îÇ Release    ‚îÇ ‚îÇ ‚îÇ ‚îÇ Standard   ‚îÇ Standard   ‚îÇ ‚îÇ
#        ‚îÇ ‚îÇ Android    ‚îÇ iOS        ‚îÇ   ‚îÇ ‚îÇ ‚îÇ Android    ‚îÇ iOS        ‚îÇ ‚îÇ ‚îÇ ‚îÇ APK        ‚îÇ IPA        ‚îÇ ‚îÇ
#        ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
#        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
#                     ‚îÇ                                  ‚îÇ                              ‚îÇ
#                     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
#                                  ‚îÇ                                     ‚îÇ
#                                  ‚ñº                                     ‚ñº
# PHASE 3: Final status (runs after all Phase 2 matrices complete)
#                        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
#                        ‚îÇ   üìä Pipeline Status       ‚îÇ
#                        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

on:
  push:
    branches:
      - main
      - Asad/chat
  pull_request:
    branches:
      - main
      - Asad/chat

permissions:
  contents: write

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
  FLUTTER_VERSION: '3.24.0'

jobs:
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # üîπ PHASE 1: INITIALIZATION JOBS (Run in Parallel)
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  
  # üß± Version Setup
  version-setup:
    name: üß± Version Setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      timestamp: ${{ steps.version-info.outputs.timestamp }}
      build_number: ${{ steps.version-info.outputs.build_number }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üì¶ Install cider globally
        run: dart pub global activate cider

      - name: üìä Get version and timestamp
        id: version-info
        run: |
          # Install dependencies first to ensure pubspec.yaml is accessible
          flutter pub get
          
          # Try multiple methods to get version
          if command -v dart &> /dev/null && dart pub global list | grep -q cider; then
            VERSION=$(dart pub global run cider version 2>/dev/null || echo "")
          fi
          
          # Fallback to parsing pubspec.yaml directly
          if [ -z "$VERSION" ]; then
            VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | tr -d ' ')
          fi
          
          # If still empty, use a default
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0+1"
          fi
          
          # Extract build number
          BUILD_NUMBER=$(echo $VERSION | cut -d '+' -f 2)
          if [ -z "$BUILD_NUMBER" ]; then
            BUILD_NUMBER="1"
          fi
          
          TIMESTAMP=$(date +'%m-%d-%Y %H:%M')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Version: $VERSION"
          echo "‚è∞ Timestamp: $TIMESTAMP"
          echo "üî¢ Build Number: $BUILD_NUMBER"

  # üîç Parse Commit
  parse-commit:
    name: üîç Parse Commit
    runs-on: ubuntu-latest
    outputs:
      should_run_patch_android: ${{ steps.parse.outputs.should_run_patch_android }}
      should_run_patch_ios: ${{ steps.parse.outputs.should_run_patch_ios }}
      should_run_release_android: ${{ steps.parse.outputs.should_run_release_android }}
      should_run_release_ios: ${{ steps.parse.outputs.should_run_release_ios }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Parse commit message
        id: parse
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "üìù Commit Message: $COMMIT_MESSAGE"
          
          # Initialize all flags as false
          PATCH_ANDROID=false
          PATCH_IOS=false
          RELEASE_ANDROID=false
          RELEASE_IOS=false
          
          # Parse commit message for flags
          if [[ $COMMIT_MESSAGE =~ \[patch-android\] ]]; then
            PATCH_ANDROID=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-ios\] ]]; then
            PATCH_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-both\] ]]; then
            PATCH_ANDROID=true
            PATCH_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[release-android\] ]]; then
            RELEASE_ANDROID=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[release-ios\] ]]; then
            RELEASE_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[release-both\] ]]; then
            RELEASE_ANDROID=true
            RELEASE_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-android-release-ios\] ]]; then
            PATCH_ANDROID=true
            RELEASE_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-ios-release-android\] ]]; then
            PATCH_IOS=true
            RELEASE_ANDROID=true
          fi
          
          # Set outputs
          echo "should_run_patch_android=$PATCH_ANDROID" >> $GITHUB_OUTPUT
          echo "should_run_patch_ios=$PATCH_IOS" >> $GITHUB_OUTPUT
          echo "should_run_release_android=$RELEASE_ANDROID" >> $GITHUB_OUTPUT
          echo "should_run_release_ios=$RELEASE_IOS" >> $GITHUB_OUTPUT
          
          echo "üéØ Parsed Actions:"
          echo "  üì± Patch Android: $PATCH_ANDROID"
          echo "  üçé Patch iOS: $PATCH_IOS"
          echo "  üì± Release Android: $RELEASE_ANDROID"
          echo "  üçé Release iOS: $RELEASE_IOS"
          echo "  üì¶ Standard APK & IPA: Always Run"

  # üîê Validate Secrets
  validate-secrets:
    name: üîê Validate Secrets
    runs-on: ubuntu-latest
    steps:
      - name: üîç Check required secrets
        run: |
          echo "üîê Validating required secrets..."
          
          # Check email secrets
          if [ -z "${{ secrets.GMAIL_USERNAME }}" ] || [ -z "${{ secrets.GMAIL_APP_PASSWORD }}" ] || \
             [ -z "${{ secrets.RECIPIENT_EMAILS }}" ] || [ -z "${{ secrets.ACCOUNT_HOLDER_EMAIL }}" ]; then
            echo "‚ùå Missing email secrets (GMAIL_USERNAME, GMAIL_APP_PASSWORD, RECIPIENT_EMAILS, ACCOUNT_HOLDER_EMAIL)"
            exit 1
          fi
          
          # Check Android signing secrets
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ] || [ -z "${{ secrets.KEYSTORE_ALIAS }}" ] || \
             [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ] || [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "‚ùå Missing Android signing secrets"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are present"

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # üîπ PHASE 2: BUILD MATRICES (Run in Parallel after Phase 1 completes)
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

  # üèñÔ∏è Patch Matrix (Android and iOS as separate tasks)
  patch-matrix:
    name: üèñÔ∏è Patch Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_patch_android == 'true' || needs.parse-commit.outputs.should_run_patch_ios == 'true' }}
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            condition: ${{ needs.parse-commit.outputs.should_run_patch_android == 'true' }}
            runner: ubuntu-latest
            emoji: ü§ñ
            task_name: Patch Android
          - platform: ios
            condition: ${{ needs.parse-commit.outputs.should_run_patch_ios == 'true' }}
            runner: macos-latest
            emoji: üçè
            task_name: Patch iOS
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: ‚è≠Ô∏è Skip if not needed
        if: ${{ !matrix.condition }}
        run: echo "‚è≠Ô∏è Skipping ${{ matrix.task_name }} - not requested in commit message"

      - name: üì• Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: ‚òï Set up Java (Android only)
        if: matrix.platform == 'android' && matrix.condition
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: üîß Set up Flutter
        if: ${{ matrix.condition }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üèñÔ∏è Setup Shorebird CLI
        if: ${{ matrix.condition }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ‚úÖ Verify Shorebird Installation
        if: ${{ matrix.condition }}
        run: shorebird --version

      - name: üì¶ Install dependencies
        if: ${{ matrix.condition }}
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: üöÄ Create Shorebird patch
        if: ${{ matrix.condition }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: shorebird patch ${{ matrix.platform }} --release-version latest

      - name: üì§ Upload artifact
        if: always() && matrix.condition
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-patch-${{ needs.version-setup.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7

  # üöÄ Release Matrix (Android and iOS as separate tasks)
  release-matrix:
    name: üöÄ Release Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_release_android == 'true' || needs.parse-commit.outputs.should_run_release_ios == 'true' }}
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            condition: ${{ needs.parse-commit.outputs.should_run_release_android == 'true' }}
            runner: ubuntu-latest
            emoji: üöÄü§ñ
            task_name: Release Android
          - platform: ios
            condition: ${{ needs.parse-commit.outputs.should_run_release_ios == 'true' }}
            runner: macos-latest
            emoji: üöÄüçè
            task_name: Release iOS
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: ‚è≠Ô∏è Skip if not needed
        if: ${{ !matrix.condition }}
        run: echo "‚è≠Ô∏è Skipping ${{ matrix.task_name }} - not requested in commit message"

      - name: üì• Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: ‚òï Set up Java (Android only)
        if: matrix.platform == 'android' && matrix.condition
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: üîß Set up Flutter
        if: ${{ matrix.condition }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üèñÔ∏è Setup Shorebird CLI
        if: ${{ matrix.condition }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ‚úÖ Verify Shorebird Installation
        if: ${{ matrix.condition }}
        run: shorebird --version

      - name: üíé Set up Ruby (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: üèÉ Install Fastlane (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        run: gem install fastlane

      - name: üì¶ Install dependencies
        if: ${{ matrix.condition }}
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: üî¢ Bump version
        if: ${{ matrix.condition }}
        run: |
          dart pub global activate cider
          dart pub global run cider bump build
          NEW_VERSION=$(dart pub global run cider version)
          echo "üÜï New version: $NEW_VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main

      - name: üîê Decode Android Keystore
        if: matrix.platform == 'android' && matrix.condition
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: üîê Fastlane Match Setup (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: üöÄ Create Shorebird release
        if: ${{ matrix.condition }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            # Create Shorebird release with APK
            shorebird release android \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
            
            # Create AAB using Shorebird
            shorebird release android --artifact=aab \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            # iOS release
            shorebird release ios --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: ‚úàÔ∏è Deploy to TestFlight (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          bundle exec fastlane beta

      - name: üì§ Upload artifacts
        if: always() && matrix.condition
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-release-${{ needs.version-setup.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios/ipa/*.ipa
          retention-days: 7

      - name: üìß Send Release Notification
        if: ${{ matrix.condition }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: ${{ matrix.emoji }} ${{ matrix.task_name }} - ${{ needs.version-setup.outputs.version }}
          body: |
            üöÄ ${{ matrix.task_name }} (Shorebird) for version ${{ needs.version-setup.outputs.version }}
            ‚è∞ Build time: ${{ needs.version-setup.outputs.timestamp }}
            üìù Commit: ${{ github.sha }}
            
            ‚ú® This release supports over-the-air updates via Shorebird
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}

  # üì¶ Standard Build Matrix (APK and IPA as separate tasks)
  standard-matrix:
    name: üì¶ Standard Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            runner: ubuntu-latest
            emoji: üì±
            artifact_name: APK
            task_name: Standard APK
          - platform: ios
            runner: macos-latest
            emoji: üçé
            artifact_name: IPA
            task_name: Standard IPA
    runs-on: ${{ matrix.runner }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Set up Java (Android only)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: üîß Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: üíé Set up Ruby (iOS only)
        if: matrix.platform == 'ios'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: üèÉ Install Fastlane (iOS only)
        if: matrix.platform == 'ios'
        run: gem install fastlane

      - name: üì¶ Install dependencies
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: üîê Decode Android Keystore
        if: matrix.platform == 'android'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: üîê Fastlane Match Setup (iOS only)
        if: matrix.platform == 'ios'
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: üî® Build Standard Release
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            flutter build apk --release \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            flutter build ipa --release \
            --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: üì§ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-standard-${{ needs.version-setup.outputs.version }}-${{ needs.version-setup.outputs.timestamp }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7

      - name: üìä Check APK size (Android only)
        if: matrix.platform == 'android'
        id: apk-size
        run: |
          APK_SIZE=$(stat -c %s build/app/outputs/flutter-apk/app-release.apk)
          echo "üìè APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          if [ $APK_SIZE -gt 26214400 ]; then
            echo "large_apk=true" >> $GITHUB_OUTPUT
          else
            echo "large_apk=false" >> $GITHUB_OUTPUT
          fi

      - name: ‚òÅÔ∏è Upload to Google Drive (Android - if large)
        if: matrix.platform == 'android' && steps.apk-size.outputs.large_apk == 'true'
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.3.1
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          parent_folder_id: 0ANYm83GKkrjgUk9PVA
          target: build/app/outputs/flutter-apk/app-release.apk
          name: app-release-${{ needs.version-setup.outputs.version }}-(${{ needs.version-setup.outputs.timestamp }}).apk
          override: false
          replace_mode: add_new
        id: drive-upload

      - name: üìß Send Standard Build Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: ${{ matrix.emoji }} ${{ matrix.task_name }} Build - ${{ needs.version-setup.outputs.version }}
          body: |
            üî® ${{ matrix.task_name }} Build (Flutter)
            üìã Version: ${{ needs.version-setup.outputs.version }}
            ‚è∞ Build time: ${{ needs.version-setup.outputs.timestamp }}
            üìù Commit: ${{ github.sha }}
            
            ‚ö†Ô∏è Note: This is a standard Flutter build (No Shorebird OTA support)
            ${{ matrix.platform == 'android' && steps.apk-size.outputs.large_apk == 'true' && format('üì• Download from Google Drive: {0}', steps.drive-upload.outputs.web_view_link) || '' }}
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}
          attachments: |
            ${{ matrix.platform == 'android' && 'build/app/outputs/flutter-apk/app-release.apk' || '' }}
            ${{ matrix.platform == 'ios' && 'build/ios/ipa/*.ipa' || '' }}

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # üîπ PHASE 3: PIPELINE STATUS (Runs after all Phase 2 jobs complete)
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

  # üìä Pipeline Status
  pipeline-status:
    name: üìä Pipeline Status
    needs: [version-setup, parse-commit, validate-secrets, patch-matrix, release-matrix, standard-matrix]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìä Prepare status notification
        id: notification
        run: |
          BODY="üöÄ CI/CD Pipeline Status Report\n"
          BODY="$BODY‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
          BODY="$BODYüìã Version: ${{ needs.version-setup.outputs.version }}\n"
          BODY="$BODY‚è∞ Timestamp: ${{ needs.version-setup.outputs.timestamp }}\n"
          BODY="$BODYüìù Commit: ${{ github.sha }}\n\n"
          
          BODY="$BODYüéØ Three-Phase Pipeline Results:\n"
          BODY="$BODY‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
          BODY="$BODY‚îÇ PHASE 1 - INITIALIZATION (Parallel)                                                ‚îÇ\n"
          BODY="$BODY‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
          
          if [ "${{ needs.version-setup.result }}" == "success" ]; then
            BODY="$BODY‚úÖ üß± Version Setup: Success\n"
          else
            BODY="$BODY‚ùå üß± Version Setup: Failed\n"
          fi
          
          if [ "${{ needs.parse-commit.result }}" == "success" ]; then
            BODY="$BODY‚úÖ üîç Parse Commit: Success\n"
          else
            BODY="$BODY‚ùå üîç Parse Commit: Failed\n"
          fi
          
          if [ "${{ needs.validate-secrets.result }}" == "success" ]; then
            BODY="$BODY‚úÖ üîê Validate Secrets: Success\n"
          else
            BODY="$BODY‚ùå üîê Validate Secrets: Failed\n"
          fi
          
          BODY="$BODY\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
          BODY="$BODY‚îÇ PHASE 2 - BUILD MATRICES (Parallel after Phase 1)                                  ‚îÇ\n"
          BODY="$BODY‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
          
          if [ "${{ needs.patch-matrix.result }}" == "success" ]; then
            BODY="$BODY‚úÖ üèñÔ∏è Patch Matrix: Success\n"
          elif [ "${{ needs.patch-matrix.result }}" == "failure" ]; then
            BODY="$BODY‚ùå üèñÔ∏è Patch Matrix: Failed\n"
          elif [ "${{ needs.patch-matrix.result }}" == "skipped" ]; then
            BODY="$BODY‚è≠Ô∏è üèñÔ∏è Patch Matrix: Skipped\n"
          fi
          
          if [ "${{ needs.release-matrix.result }}" == "success" ]; then
            BODY="$BODY‚úÖ üöÄ Release Matrix: Success\n"
          elif [ "${{ needs.release-matrix.result }}" == "failure" ]; then
            BODY="$BODY‚ùå üöÄ Release Matrix: Failed\n"
          elif [ "${{ needs.release-matrix.result }}" == "skipped" ]; then
            BODY="$BODY‚è≠Ô∏è üöÄ Release Matrix: Skipped\n"
          fi
          
          if [ "${{ needs.standard-matrix.result }}" == "success" ]; then
            BODY="$BODY‚úÖ üì¶ Standard Matrix: Success\n"
          elif [ "${{ needs.standard-matrix.result }}" == "failure" ]; then
            BODY="$BODY‚ùå üì¶ Standard Matrix: Failed\n"
          elif [ "${{ needs.standard-matrix.result }}" == "skipped" ]; then
            BODY="$BODY‚è≠Ô∏è üì¶ Standard Matrix: Skipped\n"
          fi
          
          BODY="$BODY\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
          BODY="$BODY‚îÇ PHASE 3 - PIPELINE STATUS (Final Summary)                                           ‚îÇ\n"
          BODY="$BODY‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
          BODY="$BODY‚úÖ üìä Pipeline Status: Complete\n\n"
          
          BODY="$BODYüìå Commit Flags Detected:\n"
          BODY="$BODY  üì± Patch Android: ${{ needs.parse-commit.outputs.should_run_patch_android }}\n"
          BODY="$BODY  üçè Patch iOS: ${{ needs.parse-commit.outputs.should_run_patch_ios }}\n"
          BODY="$BODY  üì± Release Android: ${{ needs.parse-commit.outputs.should_run_release_android }}\n"
          BODY="$BODY  üçè Release iOS: ${{ needs.parse-commit.outputs.should_run_release_ios }}\n"
          BODY="$BODY  üì¶ Standard Builds: Always Run\n"
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üìß Send unified status notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: üìä Three-Phase CI/CD Pipeline Status - ${{ needs.version-setup.outputs.version }}
          body: ${{ steps.notification.outputs.body }}
          to: ${{ secrets.ACCOUNT_HOLDER_EMAIL }}
          from: ${{ secrets.GMAIL_USERNAME }}

      # Optional: Slack notification (uncomment to enable)
      # - name: Send Slack notification
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     channel-id: 'your-channel-id'
      #     text: ${{ steps.notification.outputs.body }}
      #   if: always()