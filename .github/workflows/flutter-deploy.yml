
name: 🚀 Flutter CI/CD Pipeline with Shorebird

on:
  push:
    branches:
      - main
      - Asad/chat
  pull_request:
    branches:
      - main
      - Asad/chat

permissions:
  contents: write

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
  FLUTTER_VERSION: '3.24.0'

jobs:
  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 PHASE 1: INITIALIZATION MATRICES (Run in Parallel)
  # ═══════════════════════════════════════════════════════════════════════════════════════
  version-setup:
    name: 🧱 Version Setup
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest]
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      timestamp: ${{ steps.version-info.outputs.timestamp }}
      build_number: ${{ steps.version-info.outputs.build_number }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 📦 Install cider globally
        run: dart pub global activate cider

      - name: 📊 Get version and timestamp
        id: version-info
        run: |
          flutter pub get
          VERSION=$(dart pub global run cider version 2>/dev/null || grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | tr -d ' ')
          VERSION=${VERSION:-"1.0.0+1"}
          BUILD_NUMBER=$(echo $VERSION | cut -d '+' -f 2)
          BUILD_NUMBER=${BUILD_NUMBER:-"1"}
          TIMESTAMP=$(date +'%m-%d-%Y %H:%M')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ Version: $VERSION"
          echo "⏰ Timestamp: $TIMESTAMP"
          echo "🔢 Build Number: $BUILD_NUMBER"

  parse-commit:
    name: 🔍 Parse Commit
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest]
    outputs:
      should_run_patch_android: ${{ steps.parse.outputs.should_run_patch_android }}
      should_run_patch_ios: ${{ steps.parse.outputs.should_run_patch_ios }}
      should_run_release_android: ${{ steps.parse.outputs.should_run_release_android }}
      should_run_release_ios: ${{ steps.parse.outputs.should_run_release_ios }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Parse commit message
        id: parse
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "📝 Commit Message: $COMMIT_MESSAGE"
          
          PATCH_ANDROID=false
          PATCH_IOS=false
          RELEASE_ANDROID=false
          RELEASE_IOS=false
          
          # Strict regex to match exact tags at start of message
          if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-android\]' >/dev/null; then
            PATCH_ANDROID=true
          fi
          if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-ios\]' >/dev/null; then
            PATCH_IOS=true
          fi
          if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-both\]' >/dev/null; then
            PATCH_ANDROID=true
            PATCH_IOS=true
          fi
          if echo "$COMMIT_MESSAGE" | grep -E '^\[release-android\]' >/dev/null; then
            RELEASE_ANDROID=true
          fi
          if echo "$COMMIT_MESSAGE" | grep -E '^\[release-ios\]' >/dev/null; then
            RELEASE_IOS=true
          fi
          if echo "$COMMIT_MESSAGE" | grep -E '^\[release-both\]' >/dev/null; then
            RELEASE_ANDROID=true
            RELEASE_IOS=true
          fi
          if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-android-release-ios\]' >/dev/null; then
            PATCH_ANDROID=true
            RELEASE_IOS=true
          fi
          if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-ios-release-android\]' >/dev/null; then
            PATCH_IOS=true
            RELEASE_ANDROID=true
          fi
          
          echo "should_run_patch_android=$PATCH_ANDROID" >> $GITHUB_OUTPUT
          echo "should_run_patch_ios=$PATCH_IOS" >> $GITHUB_OUTPUT
          echo "should_run_release_android=$RELEASE_ANDROID" >> $GITHUB_OUTPUT
          echo "should_run_release_ios=$RELEASE_IOS" >> $GITHUB_OUTPUT
          
          echo "🎯 Parsed Actions:"
          echo "  📱 Patch Android: $PATCH_ANDROID"
          echo "  🍎 Patch iOS: $PATCH_IOS"
          echo "  📱 Release Android: $RELEASE_ANDROID"
          echo "  🍎 Release iOS: $RELEASE_IOS"
          echo "  📦 Standard APK & IPA: Always Run"

  validate-secrets:
    name: 🔐 Validate Secrets
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Check required secrets
        run: |
          echo "🔐 Validating required secrets..."
          if [ -z "${{ secrets.GMAIL_USERNAME }}" ] || [ -z "${{ secrets.GMAIL_APP_PASSWORD }}" ] || \
             [ -z "${{ secrets.RECIPIENT_EMAILS }}" ] || [ -z "${{ secrets.ACCOUNT_HOLDER_EMAIL }}" ]; then
            echo "❌ Missing email secrets"
            exit 1
          fi
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ] || [ -z "${{ secrets.KEYSTORE_ALIAS }}" ] || \
             [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ] || [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "❌ Missing Android signing secrets"
            exit 1
          fi
          echo "✅ All required secrets are present"

  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 PHASE 2: BUILD MATRICES
  # ═══════════════════════════════════════════════════════════════════════════════════════
  Patch:
    name: 🏖️ Patch
    needs: [version-setup, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_patch_android == 'true' || needs.parse-commit.outputs.should_run_patch_ios == 'true' }}
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            condition: ${{ needs.parse-commit.outputs.should_run_patch_android == 'true' }}
            runner: ubuntu-latest
            emoji: 🤖
            task_name: Patch Android
          - platform: ios
            condition: ${{ needs.parse-commit.outputs.should_run_patch_ios == 'true' }}
            runner: macos-latest
            emoji: 🍏
            task_name: Patch iOS
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: 📥 Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4
  
      - name: ☕ Set up Java (Android only)
        if: matrix.platform == 'android' && matrix.condition
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
  
      - name: 🔧 Set up Flutter
        if: ${{ matrix.condition }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
  
      - name: 🏖️ Setup Shorebird CLI
        if: ${{ matrix.condition }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true
  
      - name: ✅ Verify Shorebird Installation
        if: ${{ matrix.condition }}
        run: shorebird --version
  
      - name: 📦 Install dependencies
        if: ${{ matrix.condition }}
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi
  
      - name: 🚀 Create Shorebird patch
        if: ${{ matrix.condition }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: shorebird patch ${{ matrix.platform }} --release-version latest
  
      - name: 📤 Upload artifact
        if: always() && matrix.condition
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-patch-${{ needs.version-setup.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7
  release-matrix:
    name: 🚀 Release Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_release_android == 'true' || needs.parse-commit.outputs.should_run_release_ios == 'true' }}
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            condition: ${{ needs.parse-commit.outputs.should_run_release_android == 'true' }}
            runner: ubuntu-latest
            emoji: 🚀🤖
            task_name: Release Android
          - platform: ios
            condition: ${{ needs.parse-commit.outputs.should_run_release_ios == 'true' }}
            runner: macos-latest
            emoji: 🚀🍏
            task_name: Release iOS
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: ⏭️ Skip if not needed
        if: ${{ !matrix.condition }}
        run: echo "⏭️ Skipping ${{ matrix.task_name }} - not requested in commit message"

      - name: 📥 Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: ☕ Set up Java (Android only)
        if: matrix.platform == 'android' && matrix.condition
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        if: ${{ matrix.condition }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🏖️ Setup Shorebird CLI
        if: ${{ matrix.condition }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ✅ Verify Shorebird Installation
        if: ${{ matrix.condition }}
        run: shorebird --version

      - name: 💎 Set up Ruby (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: 🏃 Install Fastlane (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        run: gem install fastlane

      - name: 📦 Install dependencies
        if: ${{ matrix.condition }}
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: 🔢 Bump version
        if: ${{ matrix.condition }}
        run: |
          dart pub global activate cider
          dart pub global run cider bump build
          NEW_VERSION=$(dart pub global run cider version)
          echo "🆕 New version: $NEW_VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main

      - name: 🔐 Decode Android Keystore
        if: matrix.platform == 'android' && matrix.condition
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🔐 Fastlane Match Setup (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: 🚀 Create Shorebird release
        if: ${{ matrix.condition }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            shorebird release android \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
            shorebird release android --artifact=aab \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            shorebird release ios --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: ✈️ Deploy to TestFlight (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          bundle exec fastlane beta

      - name: 📤 Upload artifacts
        if: always() && matrix.condition
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-release-${{ needs.version-setup.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios/ipa/*.ipa
          retention-days: 7

      - name: 📧 Send Release Notification
        if: ${{ matrix.condition }}
        uses: dawidd6/action-send-mail@v3
        with: 
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: ${{ matrix.emoji }} ${{ matrix.task_name }} - ${{ needs.version-setup.outputs.version }}
          body: |
            🚀 ${{ matrix.task_name }} (Shorebird) for version ${{ needs.version-setup.outputs.version }}
            ⏰ Build time: ${{ needs.version-setup.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            ✨ This release supports over-the-air updates via Shorebird
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}

  standard-matrix:
    name: 📦 Standard Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            runner: ubuntu-latest
            emoji: 📱
            artifact_name: APK
            task_name: Standard APK
          - platform: ios
            runner: macos-latest
            emoji: 🍎
            artifact_name: IPA
            task_name: Standard IPA
    runs-on: ${{ matrix.runner }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java (Android only)
        # if: widget.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 💎 Set up Ruby (iOS only)
        if: matrix.platform == 'ios'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: 🏃 Install Fastlane (iOS only)
        if: matrix.platform == 'ios'
        run: gem install fastlane

      - name: 📦 Install dependencies
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: 🔐 Decode Android Keystore
        if: matrix.platform == 'android'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🔐 Fastlane Match Setup (iOS only)
        if: matrix.platform == 'ios'
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: 🔨 Build Standard Release
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            flutter build apk --release \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            flutter build ipa --release \
            --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-standard-${{ needs.version-setup.outputs.version }}-${{ needs.version-setup.outputs.timestamp }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7

      - name: 📊 Check APK size (Android only)
        if: matrix.platform == 'android'
        id: apk-size
        run: |
          APK_SIZE=$(stat -c %s build/app/outputs/flutter-apk/app-release.apk)
          echo "📏 APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          if [ $APK_SIZE -gt 26214400 ]; then
            echo "large_apk=true" >> $GITHUB_OUTPUT
          else
            echo "large_apk=false" >> $GITHUB_OUTPUT
          fi

      - name: ☁️ Upload to Google Drive (Android - if large)
        if: matrix.platform == 'android' && steps.apk-size.outputs.large_apk == 'true'
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.3.1
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          parent_folder_id: 0ANYm83GKkrjgUk9PVA
          target: build/app/outputs/flutter-apk/app-release.apk
          name: app-release-${{ needs.version-setup.outputs.version }}-(${{ needs.version-setup.outputs.timestamp }}).apk
          override: false
          replace_mode: add_new
        id: drive-upload

      - name: 📧 Send Standard Build Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: ${{ matrix.emoji }} ${{ matrix.task_name }} Build - ${{ needs.version-setup.outputs.version }}
          body: |
            🔨 ${{ matrix.task_name }} Build (Flutter)
            📋 Version: ${{ needs.version-setup.outputs.version }}
            ⏰ Build time: ${{ needs.version-setup.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            ⚠️ Note: This is a standard Flutter build (No Shorebird OTA support)
            ${{ matrix.platform == 'android' && steps.apk-size.outputs.large_apk == 'true' && format('📥 Download from Google Drive: {0}', steps.drive-upload.outputs.web_view_link) || '' }}
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}
          attachments: |
            ${{ matrix.platform == 'android' && 'build/app/outputs/flutter-apk/app-release.apk' || '' }}
            ${{ matrix.platform == 'ios' && 'build/ios/ipa/*.ipa' || '' }}

  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 PHASE 3: PIPELINE STATUS
  # ═══════════════════════════════════════════════════════════════════════════════════════
  pipeline-status:
    name: 📊 Pipeline Status
    needs: [version-setup, parse-commit, validate-secrets, Patch, release-matrix, standard-matrix]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4  

      - name: 📊 Prepare status notification
        id: notification
        run: |
          BODY='<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CI/CD Pipeline Status Report</title>
          </head>
          <body style="margin: 0; padding: 0; font-family: Arial, Helvetica, sans-serif; background-color: #f4f4f4;">
            <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 600px; background-color: #ffffff; border: 1px solid #e0e0e0; margin: 20px auto;">
              <tr>
                <td style="background-color: #007bff; padding: 20px; text-align: center;">
                  <h1 style="color: #ffffff; margin: 0; font-size: 24px;">🚀 CI/CD Pipeline Status Report</h1>
                </td>
              </tr>
              <tr>
                <td style="padding: 20px;">
                  <table width="100%" cellpadding="0" cellspacing="0">
                    <tr>
                      <td style="padding: 10px 0; font-size: 16px; color: #333333;">
                        <strong>📋 Version:</strong> ${{ needs.version-setup.outputs.version }}
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 10px 0; font-size: 16px; color: #333333;">
                        <strong>⏰ Timestamp:</strong> ${{ needs.version-setup.outputs.timestamp }}
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 10px 0; font-size: 16px; color: #333333;">
                        <strong>📝 Commit:</strong> ${{ github.sha }}
                      </td>
                    </tr>
                  </table>
                  <hr style="border: 0; border-top: 1px solid #e0e0e0; margin: 20px 0;">
                  <h2 style="color: #333333; font-size: 20px; margin: 0 0 10px;">🎯 Three-Phase Pipeline Results</h2>
                  <table width="100%" cellpadding="0" cellspacing="0" style="border: 1px solid #e0e0e0; border-radius: 5px; margin-bottom: 20px;">
                    <tr>
                      <td style="background-color: #f8f9fa; padding: 15px; font-size: 16px; font-weight: bold; color: #333333;">
                        Phase 1 - Initialization Matrices
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 10px;">
                        <p style="margin: 5px 0; font-size: 14px; color: #333333;">
                          🧱 Version Setup: <span style="color: ${{ needs.version-setup.result == 'success' && '#28a745' || '#dc3545' }};">${{ needs.version-setup.result == 'success' && 'Success' || 'Failed' }}</span>
                        </p>
                        <p style="margin: 5px 0; font-size: 14px; color: #333333;">
                          🔍 Parse Commit: <span style="color: ${{ needs.parse-commit.result == 'success' && '#28a745' || '#dc3545' }};">${{ needs.parse-commit.result == 'success' && 'Success' || 'Failed' }}</span>
                        </p>
                        <p style="margin: 5px 0; font-size: 14px; color: #333333;">
                          🔐 Validate Secrets: <span style="color: ${{ needs.validate-secrets.result == 'success' && '#28a745' || '#dc3545' }};">${{ needs.validate-secrets.result == 'success' && 'Success' || 'Failed' }}</span>
                        </p>
                      </td>
                    </tr>
                  </table>
                  <table width="100%" cellpadding="0" cellspacing="0" style="border: 1px solid #e0e0e0; border-radius: 5px; margin-bottom: 20px;">
                    <tr>
                      <td style="background-color: #ivelmente  


      # Optional: Slack notification (uncomment to enable)
      # - name: Send Slack notification
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     channel-id: 'your-channel-id'
      #     text: ${{ steps.notification.outputs.body }}
      #   if: always()


