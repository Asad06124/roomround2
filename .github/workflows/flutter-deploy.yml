name: 🚀 Flutter CI/CD Pipeline with Shorebird

# 🚀 CI/CD Pipeline Flow
#        ┌────────────────────┐   ┌────────────────────┐   ┌──────────────────────┐
#        │  Setup & Version   │   │    Parse Commit    │   │   Validate Secrets   │
#        └─────────┬──────────┘   └─────────┬──────────┘   └─────────┬────────────┘
#                  │                        │                        │
#                  └────────────┬───────────┴────────────┬──────────┘
#                               │                        │
#                               ▼                        ▼
#        ┌────────────────────────────────┐ ┌────────────────────────────┐ ┌──────────────────────────────┐
#        │       Patch Matrix             │ │      Release Matrix         │ │      Standard Matrix          │
#        │ ┌────────────┬────────────┐   │ │ ┌────────────┬────────────┐ │ │ ┌────────────┬────────────┐ │
#        │ │ Patch      │ Patch      │   │ │ │ Release    │ Release    │ │ │ │ Standard   │ Standard   │ │
#        │ │ Android    │ iOS        │   │ │ │ Android    │ iOS        │ │ │ │ APK        │ IPA        │ │
#        │ └────────────┴────────────┘   │ │ └────────────┴────────────┘ │ │ └────────────┴────────────┘ │
#        └────────────┬───────────────┘ └────────────┬───────────────┘ └────────────┬────────────────┘
#                     │                               │                              │
#                     └────────────┬──────────────────┴──────────────┬──────────────┘
#                                  │                                 │
#                                  ▼                                 ▼
#                        ┌────────────────────────────┐
#                        │      Pipeline Status        │
#                        └────────────────────────────┘

on:
  push:
    branches: [main, develop, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      force_patch_android:
        description: 'Force patch Android'
        required: false
        type: boolean
        default: false
      force_patch_ios:
        description: 'Force patch iOS'
        required: false
        type: boolean
        default: false
      force_release_android:
        description: 'Force release Android'
        required: false
        type: boolean
        default: false
      force_release_ios:
        description: 'Force release iOS'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read
  checks: write

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.3.0'
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

jobs:
  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔧 PHASE 1: INITIALIZATION (Run in Parallel)
  # ═══════════════════════════════════════════════════════════════════════════════════════
  
  version-setup:
    name: 🔢 Version Setup
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
      timestamp: ${{ steps.version.outputs.timestamp }}
      release_name: ${{ steps.version.outputs.release_name }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 📦 Install cider
        run: dart pub global activate cider

      - name: 🔍 Extract version info
        id: version
        run: |
          # Get dependencies
          flutter pub get
          
          # Extract version using multiple methods
          if command -v dart &> /dev/null && dart pub global list | grep -q cider; then
            VERSION=$(dart pub global run cider version 2>/dev/null || echo "")
          fi
          
          # Fallback to pubspec.yaml parsing
          if [ -z "$VERSION" ]; then
            VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//' | tr -d ' ')
          fi
          
          # Default fallback
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0+1"
          fi
          
          # Extract components
          BUILD_NUMBER=$(echo "$VERSION" | cut -d '+' -f 2)
          VERSION_NAME=$(echo "$VERSION" | cut -d '+' -f 1)
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          RELEASE_NAME="v${VERSION_NAME}-${TIMESTAMP}"
          
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Version: $VERSION"
          echo "🔢 Build Number: $BUILD_NUMBER"
          echo "⏰ Timestamp: $TIMESTAMP"
          echo "🏷️ Release Name: $RELEASE_NAME"

  parse-commit:
    name: 📝 Parse Commit
    runs-on: ubuntu-latest
    outputs:
      patch_android: ${{ steps.parse.outputs.patch_android }}
      patch_ios: ${{ steps.parse.outputs.patch_ios }}
      release_android: ${{ steps.parse.outputs.release_android }}
      release_ios: ${{ steps.parse.outputs.release_ios }}
      commit_message: ${{ steps.parse.outputs.commit_message }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Parse commit and workflow inputs
        id: parse
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "📝 Commit Message: $COMMIT_MESSAGE"
          
          # Initialize flags
          PATCH_ANDROID=false
          PATCH_IOS=false
          RELEASE_ANDROID=false
          RELEASE_IOS=false
          
          # Parse commit message flags
          if [[ "$COMMIT_MESSAGE" =~ \[patch-android\] ]]; then
            PATCH_ANDROID=true
          fi
          if [[ "$COMMIT_MESSAGE" =~ \[patch-ios\] ]]; then
            PATCH_IOS=true
          fi
          if [[ "$COMMIT_MESSAGE" =~ \[patch-both\] ]]; then
            PATCH_ANDROID=true
            PATCH_IOS=true
          fi
          if [[ "$COMMIT_MESSAGE" =~ \[release-android\] ]]; then
            RELEASE_ANDROID=true
          fi
          if [[ "$COMMIT_MESSAGE" =~ \[release-ios\] ]]; then
            RELEASE_IOS=true
          fi
          if [[ "$COMMIT_MESSAGE" =~ \[release-both\] ]]; then
            RELEASE_ANDROID=true
            RELEASE_IOS=true
          fi
          
          # Override with workflow dispatch inputs
          if [ "${{ github.event.inputs.force_patch_android }}" == "true" ]; then
            PATCH_ANDROID=true
          fi
          if [ "${{ github.event.inputs.force_patch_ios }}" == "true" ]; then
            PATCH_IOS=true
          fi
          if [ "${{ github.event.inputs.force_release_android }}" == "true" ]; then
            RELEASE_ANDROID=true
          fi
          if [ "${{ github.event.inputs.force_release_ios }}" == "true" ]; then
            RELEASE_IOS=true
          fi
          
          # Set outputs
          echo "patch_android=$PATCH_ANDROID" >> $GITHUB_OUTPUT
          echo "patch_ios=$PATCH_IOS" >> $GITHUB_OUTPUT
          echo "release_android=$RELEASE_ANDROID" >> $GITHUB_OUTPUT
          echo "release_ios=$RELEASE_IOS" >> $GITHUB_OUTPUT
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          
          echo "🎯 Parsed Actions:"
          echo "  🤖 Patch Android: $PATCH_ANDROID"
          echo "  🍎 Patch iOS: $PATCH_IOS"
          echo "  🤖 Release Android: $RELEASE_ANDROID"
          echo "  🍎 Release iOS: $RELEASE_IOS"

  validate-secrets:
    name: 🔐 Validate Secrets
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Validate required secrets
        run: |
          echo "🔐 Validating pipeline secrets..."
          
          MISSING_SECRETS=()
          
          # Check Shorebird token
          if [ -z "${{ secrets.SHOREBIRD_TOKEN }}" ]; then
            MISSING_SECRETS+=("SHOREBIRD_TOKEN")
          fi
          
          # Check email configuration
          if [ -z "${{ secrets.GMAIL_USERNAME }}" ]; then
            MISSING_SECRETS+=("GMAIL_USERNAME")
          fi
          if [ -z "${{ secrets.GMAIL_APP_PASSWORD }}" ]; then
            MISSING_SECRETS+=("GMAIL_APP_PASSWORD")
          fi
          if [ -z "${{ secrets.RECIPIENT_EMAILS }}" ]; then
            MISSING_SECRETS+=("RECIPIENT_EMAILS")
          fi
          
          # Check Android signing
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            MISSING_SECRETS+=("ANDROID_KEYSTORE")
          fi
          if [ -z "${{ secrets.KEYSTORE_ALIAS }}" ]; then
            MISSING_SECRETS+=("KEYSTORE_ALIAS")
          fi
          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            MISSING_SECRETS+=("KEYSTORE_PASSWORD")
          fi
          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            MISSING_SECRETS+=("KEY_PASSWORD")
          fi
          
          # Check iOS signing (optional for patch jobs)
          if [ -z "${{ secrets.MATCH_PASSWORD }}" ]; then
            echo "⚠️  iOS signing secrets missing (MATCH_PASSWORD) - iOS releases will fail"
          fi
          
          # Report results
          if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
            echo "❌ Missing required secrets:"
            printf '  - %s\n' "${MISSING_SECRETS[@]}"
            exit 1
          else
            echo "✅ All required secrets validated"
          fi

  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔨 PHASE 2: BUILD OPERATIONS (Run in Parallel after Phase 1)
  # ═══════════════════════════════════════════════════════════════════════════════════════

  patch-jobs:
    name: 🦅 Patch Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.patch_android == 'true' || needs.parse-commit.outputs.patch_ios == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            runner: ubuntu-latest
            enabled: ${{ needs.parse-commit.outputs.patch_android == 'true' }}
            emoji: 🤖
          - platform: ios
            runner: macos-latest
            enabled: ${{ needs.parse-commit.outputs.patch_ios == 'true' }}
            emoji: 🍎
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: ⏭️ Skip if disabled
        if: ${{ matrix.enabled != 'true' }}
        run: |
          echo "⏭️ Skipping ${{ matrix.platform }} patch (not requested)"
          exit 0

      - name: 📥 Checkout repository
        if: ${{ matrix.enabled == 'true' }}
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        if: ${{ matrix.platform == 'android' && matrix.enabled == 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: 🔧 Setup Flutter
        if: ${{ matrix.enabled == 'true' }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🦅 Setup Shorebird
        if: ${{ matrix.enabled == 'true' }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: 📦 Install dependencies
        if: ${{ matrix.enabled == 'true' }}
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install --repo-update
          fi

      - name: 🔐 Setup Android keystore
        if: ${{ matrix.platform == 'android' && matrix.enabled == 'true' }}
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🚀 Create Shorebird patch
        if: ${{ matrix.enabled == 'true' }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            shorebird patch android \
              --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
              --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
              --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
              --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }} \
              --release-version=latest
          else
            shorebird patch ios --release-version=latest
          fi

      - name: 📤 Upload patch artifacts
        if: ${{ always() && matrix.enabled == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: patch-${{ matrix.platform }}-${{ needs.version-setup.outputs.release_name }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7

  release-jobs:
    name: 🚀 Release Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.release_android == 'true' || needs.parse-commit.outputs.release_ios == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            runner: ubuntu-latest
            enabled: ${{ needs.parse-commit.outputs.release_android == 'true' }}
            emoji: 🤖
          - platform: ios
            runner: macos-latest
            enabled: ${{ needs.parse-commit.outputs.release_ios == 'true' }}
            emoji: 🍎
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: ⏭️ Skip if disabled
        if: ${{ matrix.enabled != 'true' }}
        run: |
          echo "⏭️ Skipping ${{ matrix.platform }} release (not requested)"
          exit 0

      - name: 📥 Checkout repository
        if: ${{ matrix.enabled == 'true' }}
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ☕ Setup Java
        if: ${{ matrix.platform == 'android' && matrix.enabled == 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: 🔧 Setup Flutter
        if: ${{ matrix.enabled == 'true' }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🦅 Setup Shorebird
        if: ${{ matrix.enabled == 'true' }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: 💎 Setup Ruby
        if: ${{ matrix.platform == 'ios' && matrix.enabled == 'true' }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 📦 Install dependencies
        if: ${{ matrix.enabled == 'true' }}
        run: |
          flutter pub get
          dart pub global activate cider
          
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install --repo-update
            gem install fastlane
          fi

      - name: 🔢 Bump version
        if: ${{ matrix.enabled == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          dart pub global run cider bump build
          NEW_VERSION=$(dart pub global run cider version)
          
          git add pubspec.yaml
          git commit -m "🔢 Bump version to $NEW_VERSION [skip ci]"
          git push

      - name: 🔐 Setup Android keystore
        if: ${{ matrix.platform == 'android' && matrix.enabled == 'true' }}
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🔐 Setup iOS certificates
        if: ${{ matrix.platform == 'ios' && matrix.enabled == 'true' }}
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore --readonly

      - name: 🚀 Create Shorebird release
        if: ${{ matrix.enabled == 'true' }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            # Build APK
            shorebird release android \
              --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
              --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
              --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
              --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
            
            # Build AAB
            shorebird release android --artifact=aab \
              --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
              --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
              --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
              --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            # iOS release
            shorebird release ios --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: ✈️ Deploy to TestFlight
        if: ${{ matrix.platform == 'ios' && matrix.enabled == 'true' }}
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          bundle exec fastlane beta

      - name: 📤 Upload release artifacts
        if: ${{ always() && matrix.enabled == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}-${{ needs.version-setup.outputs.release_name }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios/ipa/*.ipa
          retention-days: 30

  build-jobs:
    name: 📦 Standard Build Matrix
    needs: [version-setup, parse-commit, validate-secrets]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            runner: ubuntu-latest
            artifact_name: APK
            emoji: 🤖
          - platform: ios
            runner: macos-latest
            artifact_name: IPA
            emoji: 🍎
    runs-on: ${{ matrix.runner }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        if: ${{ matrix.platform == 'android' }}
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 💎 Setup Ruby
        if: ${{ matrix.platform == 'ios' }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: 📦 Install dependencies
        run: |
          flutter pub get
          
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install --repo-update
            gem install fastlane
          fi

      - name: 🔐 Setup Android keystore
        if: ${{ matrix.platform == 'android' }}
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🔐 Setup iOS certificates
        if: ${{ matrix.platform == 'ios' }}
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore --readonly

      - name: 🔨 Build standard release
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            flutter build apk --release \
              --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
              --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
              --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
              --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            flutter build ipa --release \
              --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: 📊 Analyze build
        id: analyze
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
            if [ -f "$APK_PATH" ]; then
              SIZE=$(stat -c%s "$APK_PATH")
              SIZE_MB=$((SIZE / 1024 / 1024))
              echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
              echo "📏 APK Size: ${SIZE_MB}MB"
              
              if [ $SIZE -gt 26214400 ]; then
                echo "large_file=true" >> $GITHUB_OUTPUT
              else
                echo "large_file=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -1)
            if [ -f "$IPA_PATH" ]; then
              SIZE=$(stat -c%s "$IPA_PATH")
              SIZE_MB=$((SIZE / 1024 / 1024))
              echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
              echo "📏 IPA Size: ${SIZE_MB}MB"
              
              if [ $SIZE -gt 26214400 ]; then
                echo "large_file=true" >> $GITHUB_OUTPUT
              else
                echo "large_file=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ needs.version-setup.outputs.release_name }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7

      - name: ☁️ Upload to Google Drive (if large)
        if: ${{ steps.analyze.outputs.large_file == 'true' }}
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.3.1
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          parent_folder_id: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
          target: ${{ matrix.platform == 'android' && 'build/app/outputs/flutter-apk/app-release.apk' || 'build/ios/ipa/*.ipa' }}
          name: ${{ matrix.platform }}-${{ needs.version-setup.outputs.release_name }}.${{ matrix.platform == 'android' && 'apk' || 'ipa' }}
          override: false
        id: drive-upload

# ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 LEVEL 3: PIPELINE STATUS (Runs after all Level 2 jobs complete)
  # ═══════════════════════════════════════════════════════════════════════════════════════

  # 📊 Pipeline Status
  pipeline-status:
    name: 📊 Pipeline Status
    needs: [setup-and-version, parse-commit, validate-secrets, patch-matrix, release-matrix, standard-matrix]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Prepare status notification
        id: notification
        run: |
          BODY="🚀 CI/CD Pipeline Status Report\n"
          BODY="$BODY━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n"
          BODY="$BODY📋 Version: ${{ needs.setup-and-version.outputs.version }}\n"
          BODY="$BODY⏰ Timestamp: ${{ needs.setup-and-version.outputs.timestamp }}\n"
          BODY="$BODY📝 Commit: ${{ github.sha }}\n\n"
          
          BODY="$BODY🎯 Job Results:\n"
          BODY="$BODY┌─────────────────────────────────────────────────────────────────────────────────────┐\n"
          BODY="$BODY│ LEVEL 1 - INITIALIZATION                                                            │\n"
          BODY="$BODY└─────────────────────────────────────────────────────────────────────────────────────┘\n"
          
          if [ "${{ needs.setup-and-version.result }}" == "success" ]; then
            BODY="$BODY✅ Setup & Version: Success\n"
          else
            BODY="$BODY❌ Setup & Version: Failed\n"
          fi
          
          if [ "${{ needs.parse-commit.result }}" == "success" ]; then
            BODY="$BODY✅ Parse Commit: Success\n"
          else
            BODY="$BODY❌ Parse Commit: Failed\n"
          fi
          
          if [ "${{ needs.validate-secrets.result }}" == "success" ]; then
            BODY="$BODY✅ Validate Secrets: Success\n"
          else
            BODY="$BODY❌ Validate Secrets: Failed\n"
          fi
          
          BODY="$BODY\n┌─────────────────────────────────────────────────────────────────────────────────────┐\n"
          BODY="$BODY│ LEVEL 2 - BUILD OPERATIONS                                                          │\n"
          BODY="$BODY└─────────────────────────────────────────────────────────────────────────────────────┘\n"
          
          if [ "${{ needs.patch-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ Patch Matrix: Success\n"
          elif [ "${{ needs.patch-matrix.result }}" == "failure" ]; then
            BODY="$BODY❌ Patch Matrix: Failed\n"
          elif [ "${{ needs.patch-matrix.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Patch Matrix: Skipped\n"
          fi
          
          if [ "${{ needs.release-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ Release Matrix: Success\n"
          elif [ "${{ needs.release-matrix.result }}" == "failure" ]; then
            BODY="$BODY❌ Release Matrix: Failed\n"
          elif [ "${{ needs.release-matrix.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Release Matrix: Skipped\n"
          fi
          
          if [ "${{ needs.standard-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ Standard Matrix: Success\n"
          elif [ "${{ needs.standard-matrix.result }}" == "failure" ]; then
            BODY="$BODY❌ Standard Matrix: Failed\n"
          elif [ "${{ needs.standard-matrix.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Standard Matrix: Skipped\n"
          fi
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📧 Send unified status notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 📊 CI/CD Pipeline Status - ${{ needs.setup-and-version.outputs.version }}
          body: ${{ steps.notification.outputs.body }}
          to: ${{ secrets.ACCOUNT_HOLDER_EMAIL }}
          from: ${{ secrets.GMAIL_USERNAME }}

      # Optional: Slack notification (uncomment to enable)
      # - name: Send Slack notification
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     channel-id: 'your-channel-id'
      #     text: ${{ steps.notification.outputs.body }}
      #   if: always()