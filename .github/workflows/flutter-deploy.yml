# mermaid
# flowchart TD
#   %% Phase 1: Three separate matrices with one subtask each (run in parallel)
#   subgraph VersionMatrix["🧱 Version Setup Matrix"]
#     direction TB
#     VERSION_TASK["Version Setup 📋"]
#   end
#   subgraph ParseMatrix["🔍 Parse Commit Matrix"]
#     direction TB
#     PARSE_TASK["Parse Commit 📝"]
#   end
#   subgraph SecretsMatrix["🔐 Validate Secrets Matrix"]
#     direction TB
#     SECRETS_TASK["Validate Secrets 🔑"]
#   end

#   %% Phase 2: Three matrices with subtasks
#   subgraph PatchMatrix["🏖️ Patch Matrix"]
#     PATCH_ANDROID["Patch Android 🤖"]
#     PATCH_IOS["Patch iOS 🍏"]
#   end
#   subgraph ReleaseMatrix["🚀 Release Matrix"]
#     RELEASE_ANDROID["Release Android 🚀🤖"]
#     RELEASE_IOS["Release iOS 🚀🍏"]
#   end
#   subgraph StandardMatrix["📦 Standard Matrix"]
#     BUILD_APK["Build APK 📱"]
#     BUILD_IPA["Build IPA 🍎"]
#   end

#   %% Phase 3: Pipeline Status
#   PIPELINE_STATUS["📊 Pipeline Status"]

#   %% Flow: All Phase 1 matrices must complete before any Phase 2 matrix starts
#   VersionMatrix --> PatchMatrix
#   VersionMatrix --> ReleaseMatrix
#   VersionMatrix --> StandardMatrix
#   ParseMatrix --> PatchMatrix
#   ParseMatrix --> ReleaseMatrix
#   ParseMatrix --> StandardMatrix
#   SecretsMatrix --> PatchMatrix
#   SecretsMatrix --> ReleaseMatrix
#   SecretsMatrix --> StandardMatrix

#   %% All Phase 2 matrices feed into final status
#   PatchMatrix --> PIPELINE_STATUS
#   ReleaseMatrix --> PIPELINE_STATUS
#   StandardMatrix --> PIPELINE_STATUS


name: 🚀 Flutter CI/CD Pipeline with Shorebird

# Updated Pipeline Flow - Three Phase Structure
# PHASE 1: Three separate matrices with one subtask each (run in parallel)
#        ┌──────────────────┐ ┌──────────────────┐ ┌──────────────────┐
#        │ 🧱 Version Setup │ │ 🔍 Parse Commit │ │ 🔐 Validate Secrets │
#        │     Matrix       │ │     Matrix       │ │     Matrix       │
#        │ ┌──────────────┐ │ │ ┌──────────────┐ │ │ ┌──────────────┐ │
#        │ │ Version      │ │ │ │ Parse        │ │ │ │ Validate     │ │
#        │ │ Setup        │ │ │ │ Commit       │ │ │ │ Secrets      │ │
#        │ └──────────────┘ │ │ └──────────────┘ │ │ └──────────────┘ │
#        └────────┬─────────┘ └────────┬─────────┘ └────────┬─────────┘
#                 │                    │                    │
#                 └────────┬───────────┼──────────┬─────────┘
#                          │           │          │
#                          ▼           ▼          ▼
# PHASE 2: Three matrices with subtasks (run in parallel after Phase 1)
#        ┌────────────────────────────────┐ ┌────────────────────────────┐ ┌──────────────────────────────┐
#        │      🏖️ Patch Matrix          │ │     🚀 Release Matrix       │ │     📦 Standard Matrix        │
#        │ ┌────────────┬────────────┐   │ │ ┌────────────┬────────────┐ │ │ ┌────────────┬────────────┐ │
#        │ │ Patch      │ Patch      │   │ │ │ Release    │ Release    │ │ │ │ Standard   │ Standard   │ │
#        │ │ Android    │ iOS        │   │ │ │ Android    │ iOS        │ │ │ │ APK        │ IPA        │ │
#        │ └────────────┴────────────┘   │ │ └────────────┴────────────┘ │ │ └────────────┴────────────┘ │
#        └────────────┬───────────────────┘ └────────────┬───────────────┘ └────────────┬────────────────┘
#                     │                                  │                              │
#                     └────────────┬─────────────────────┴──────────────┬──────────────┘
#                                  │                                     │
#                                  ▼                                     ▼
# PHASE 3: Final status (runs after all Phase 2 matrices complete)
#                        ┌────────────────────────────┐
#                        │   📊 Pipeline Status       │
#                        └────────────────────────────┘

on:
  push:
    branches:
      - main
      - Asad/chat
  pull_request:
    branches:
      - main
      - Asad/chat

permissions:
  contents: write

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
  FLUTTER_VERSION: '3.24.0'

jobs:
  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 PHASE 1: INITIALIZATION MATRICES (3 Separate Matrices - Run in Parallel)
  # ═══════════════════════════════════════════════════════════════════════════════════════
  version-setup-matrix:
    name: 🧱 Version Setup Matrix
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      timestamp: ${{ steps.version-info.outputs.timestamp }}
      build_number: ${{ steps.version-info.outputs.build_number }}
    strategy:
      matrix:
        steps:
         - name: 📥 Checkout repository
           uses: actions/checkout@v4

         - name: 🔧 Set up Flutter
           uses: subosito/flutter-action@v2
           with:
            flutter-version: ${{ env.FLUTTER_VERSION }}
            channel: 'stable'
            cache: true

         - name: 📦 Install cider globally
           run: dart pub global activate cider

         - name: 📊 Get version and timestamp
           id: version-info
           run: |
            flutter pub get
            VERSION=$(dart pub global run cider version 2>/dev/null || grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | tr -d ' ')
            VERSION=${VERSION:-"1.0.0+1"}
            BUILD_NUMBER=$(echo $VERSION | cut -d '+' -f 2)
            BUILD_NUMBER=${BUILD_NUMBER:-"1"}
            TIMESTAMP=$(date +'%m-%d-%Y %H:%M')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
            echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ Version: $VERSION"
            echo "⏰ Timestamp: $TIMESTAMP"
            echo "🔢 Build Number: $BUILD_NUMBER"

  parse-commit-matrix:
    name: 🔍 Parse Commit Matrix
    runs-on: ubuntu-latest
    outputs:
      should_run_patch_android: ${{ steps.parse.outputs.should_run_patch_android }}
      should_run_patch_ios: ${{ steps.parse.outputs.should_run_patch_ios }}
      should_run_release_android: ${{ steps.parse.outputs.should_run_release_android }}
      should_run_release_ios: ${{ steps.parse.outputs.should_run_release_ios }}
    strategy:
      matrix:
       steps:
         - name: 📥 Checkout repository
           uses: actions/checkout@v4

         - name: 🔍 Parse commit message
           id: parse
           run: |
             COMMIT_MESSAGE=$(git log -1 --pretty=%B)
             echo "📝 Commit Message: $COMMIT_MESSAGE"
             
             PATCH_ANDROID=false
             PATCH_IOS=false
             RELEASE_ANDROID=false
             RELEASE_IOS=false
             
             # Strict regex to match exact tags at start of message
             if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-android\]' >/dev/null; then
               PATCH_ANDROID=true
             fi
             if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-ios\]' >/dev/null; then
               PATCH_IOS=true
             fi
             if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-both\]' >/dev/null; then
               PATCH_ANDROID=true
               PATCH_IOS=true
             fi
             if echo "$COMMIT_MESSAGE" | grep -E '^\[release-android\]' >/dev/null; then
               RELEASE_ANDROID=true
             fi
             if echo "$COMMIT_MESSAGE" | grep -E '^\[release-ios\]' >/dev/null; then
               RELEASE_IOS=true
             fi
             if echo "$COMMIT_MESSAGE" | grep -E '^\[release-both\]' >/dev/null; then
               RELEASE_ANDROID=true
               RELEASE_IOS=true
             fi
             if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-android-release-ios\]' >/dev/null; then
               PATCH_ANDROID=true
               RELEASE_IOS=true
             fi
             if echo "$COMMIT_MESSAGE" | grep -E '^\[patch-ios-release-android\]' >/dev/null; then
               PATCH_IOS=true
               RELEASE_ANDROID=true
             fi
             
             echo "should_run_patch_android=$PATCH_ANDROID" >> $GITHUB_OUTPUT
             echo "should_run_patch_ios=$PATCH_IOS" >> $GITHUB_OUTPUT
             echo "should_run_release_android=$RELEASE_ANDROID" >> $GITHUB_OUTPUT
             echo "should_run_release_ios=$RELEASE_IOS" >> $GITHUB_OUTPUT
             
             echo "🎯 Parsed Actions:"
             echo "  📱 Patch Android: $PATCH_ANDROID"
             echo "  🍎 Patch iOS: $PATCH_IOS"
             echo "  📱 Release Android: $RELEASE_ANDROID"
             echo "  🍎 Release iOS: $RELEASE_IOS"
             echo "  📦 Standard APK & IPA: Always Run"

  validate-secrets-matrix:
    name: 🔐 Validate Secrets Matrix
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Check required secrets
        run: |
          echo "🔐 Validating required secrets..."
          if [ -z "${{ secrets.GMAIL_USERNAME }}" ] || [ -z "${{ secrets.GMAIL_APP_PASSWORD }}" ] || \
             [ -z "${{ secrets.RECIPIENT_EMAILS }}" ] || [ -z "${{ secrets.ACCOUNT_HOLDER_EMAIL }}" ]; then
            echo "❌ Missing email secrets"
            exit 1
          fi
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ] || [ -z "${{ secrets.KEYSTORE_ALIAS }}" ] || \
             [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ] || [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "❌ Missing Android signing secrets"
            exit 1
          fi
          echo "✅ All required secrets are present"

  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 PHASE 2: BUILD MATRICES
  # ═══════════════════════════════════════════════════════════════════════════════════════
  patch-matrix:
    name: 🏖️ Patch Matrix
    needs: [version-setup-matrix, parse-commit-matrix, validate-secrets-matrix]
    if: ${{ needs.parse-commit-matrix.outputs.should_run_patch_android == 'true' || needs.parse-commit-matrix.outputs.should_run_patch_ios == 'true' }}
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            condition: ${{ needs.parse-commit-matrix.outputs.should_run_patch_android == 'true' }}
            runner: ubuntu-latest
            emoji: 🤖
            task_name: Patch Android
          - platform: ios
            condition: ${{ needs.parse-commit-matrix.outputs.should_run_patch_ios == 'true' }}
            runner: macos-latest
            emoji: 🍏
            task_name: Patch iOS
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: ⏭️ Skip if not needed
        if: ${{ !matrix.condition }}
        run: echo "⏭️ Skipping ${{ matrix.task_name }} - not requested in commit message"

      - name: 📥 Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: ☕ Set up Java (Android only)
        if: matrix.platform == 'android' && matrix.condition
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        if: ${{ matrix.condition }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🏖️ Setup Shorebird CLI
        if: ${{ matrix.condition }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ✅ Verify Shorebird Installation
        if: ${{ matrix.condition }}
        run: shorebird --version

      - name: 📦 Install dependencies
        if: ${{ matrix.condition }}
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: 🚀 Create Shorebird patch
        if: ${{ matrix.condition }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: shorebird patch ${{ matrix.platform }} --release-version latest

      - name: 📤 Upload artifact
        if: always() && matrix.condition
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-patch-${{ needs.version-setup-matrix.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7

  release-matrix:
    name: 🚀 Release Matrix
    needs: [version-setup-matrix, parse-commit-matrix, validate-secrets-matrix]
    if: ${{ needs.parse-commit-matrix.outputs.should_run_release_android == 'true' || needs.parse-commit-matrix.outputs.should_run_release_ios == 'true' }}
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            condition: ${{ needs.parse-commit-matrix.outputs.should_run_release_android == 'true' }}
            runner: ubuntu-latest
            emoji: 🚀🤖
            task_name: Release Android
          - platform: ios
            condition: ${{ needs.parse-commit-matrix.outputs.should_run_release_ios == 'true' }}
            runner: macos-latest
            emoji: 🚀🍏
            task_name: Release iOS
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    steps:
      - name: ⏭️ Skip if not needed
        if: ${{ !matrix.condition }}
        run: echo "⏭️ Skipping ${{ matrix.task_name }} - not requested in commit message"

      - name: 📥 Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: ☕ Set up Java (Android only)
        if: matrix.platform == 'android' && matrix.condition
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        if: ${{ matrix.condition }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🏖️ Setup Shorebird CLI
        if: ${{ matrix.condition }}
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ✅ Verify Shorebird Installation
        if: ${{ matrix.condition }}
        run: shorebird --version

      - name: 💎 Set up Ruby (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: 🏃 Install Fastlane (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        run: gem install fastlane

      - name: 📦 Install dependencies
        if: ${{ matrix.condition }}
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: 🔢 Bump version
        if: ${{ matrix.condition }}
        run: |
          dart pub global activate cider
          dart pub global run cider bump build
          NEW_VERSION=$(dart pub global run cider version)
          echo "🆕 New version: $NEW_VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main

      - name: 🔐 Decode Android Keystore
        if: matrix.platform == 'android' && matrix.condition
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🔐 Fastlane Match Setup (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: 🚀 Create Shorebird release
        if: ${{ matrix.condition }}
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            shorebird release android \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
            shorebird release android --artifact=aab \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            shorebird release ios --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: ✈️ Deploy to TestFlight (iOS only)
        if: matrix.platform == 'ios' && matrix.condition
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          bundle exec fastlane beta

      - name: 📤 Upload artifacts
        if: always() && matrix.condition
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-release-${{ needs.version-setup-matrix.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios/ipa/*.ipa
          retention-days: 7

      - name: 📧 Send Release Notification
        if: ${{ matrix.condition }}
        uses: dawidd6/action-send-mail@v3
        with: 
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: ${{ matrix.emoji }} ${{ matrix.task_name }} - ${{ needs.version-setup-matrix.outputs.version }}
          body: |
            🚀 ${{ matrix.task_name }} (Shorebird) for version ${{ needs.version-setup-matrix.outputs.version }}
            ⏰ Build time: ${{ needs.version-setup-matrix.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            ✨ This release supports over-the-air updates via Shorebird
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}

  standard-matrix:
    name: 📦 Standard Matrix
    needs: [version-setup-matrix, parse-commit-matrix, validate-secrets-matrix]
    strategy:
      matrix:
        platform:
          - android
          - ios
        include:
          - platform: android
            runner: ubuntu-latest
            emoji: 📱
            artifact_name: APK
            task_name: Standard APK
          - platform: ios
            runner: macos-latest
            emoji: 🍎
            artifact_name: IPA
            task_name: Standard IPA
    runs-on: ${{ matrix.runner }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java (Android only)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 💎 Set up Ruby (iOS only)
        if: matrix.platform == 'ios'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: 🏃 Install Fastlane (iOS only)
        if: matrix.platform == 'ios'
        run: gem install fastlane

      - name: 📦 Install dependencies
        run: |
          flutter pub get
          if [ "${{ matrix.platform }}" == "ios" ]; then
            cd ios && pod install
          fi

      - name: 🔐 Decode Android Keystore
        if: matrix.platform == 'android'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🔐 Fastlane Match Setup (iOS only)
        if: matrix.platform == 'ios'
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: 🔨 Build Standard Release
        run: |
          if [ "${{ matrix.platform }}" == "android" ]; then
            flutter build apk --release \
            --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
            --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
            --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
            --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          else
            flutter build ipa --release \
            --export-options-plist=ios/Runner/ExportOptions.plist
          fi

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-standard-${{ needs.version-setup-matrix.outputs.version }}-${{ needs.version-setup-matrix.outputs.timestamp }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/ipa/*.ipa
          retention-days: 7

      - name: 📊 Check APK size (Android only)
        if: matrix.platform == 'android'
        id: apk-size
        run: |
          APK_SIZE=$(stat -c %s build/app/outputs/flutter-apk/app-release.apk)
          echo "📏 APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          if [ $APK_SIZE -gt 26214400 ]; then
            echo "large_apk=true" >> $GITHUB_OUTPUT
          else
            echo "large_apk=false" >> $GITHUB_OUTPUT
          fi

      - name: ☁️ Upload to Google Drive (Android - if large)
        if: matrix.platform == 'android' && steps.apk-size.outputs.large_apk == 'true'
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.3.1
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          parent_folder_id: 0ANYm83GKkrjgUk9PVA
          target: build/app/outputs/flutter-apk/app-release.apk
          name: app-release-${{ needs.version-setup-matrix.outputs.version }}-(${{ needs.version-setup-matrix.outputs.timestamp }}).apk
          override: false
          replace_mode: add_new
        id: drive-upload

      - name: 📧 Send Standard Build Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: ${{ matrix.emoji }} ${{ matrix.task_name }} Build - ${{ needs.version-setup-matrix.outputs.version }}
          body: |
            🔨 ${{ matrix.task_name }} Build (Flutter)
            📋 Version: ${{ needs.version-setup-matrix.outputs.version }}
            ⏰ Build time: ${{ needs.version-setup-matrix.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            ⚠️ Note: This is a standard Flutter build (No Shorebird OTA support)
            ${{ matrix.platform == 'android' && steps.apk-size.outputs.large_apk == 'true' && format('📥 Download from Google Drive: {0}', steps.drive-upload.outputs.web_view_link) || '' }}
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}
          attachments: |
            ${{ matrix.platform == 'android' && 'build/app/outputs/flutter-apk/app-release.apk' || '' }}
            ${{ matrix.platform == 'ios' && 'build/ios/ipa/*.ipa' || '' }}

  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 PHASE 3: PIPELINE STATUS
  # ═══════════════════════════════════════════════════════════════════════════════════════
  pipeline-status:
    name: 📊 Pipeline Status
    needs: [version-setup-matrix, parse-commit-matrix, validate-secrets-matrix, patch-matrix, release-matrix, standard-matrix]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Prepare status notification
        id: notification
        run: |
          BODY="🚀 CI/CD Pipeline Status Report\n"
          BODY="$BODY━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n"
          BODY="$BODY📋 Version: ${{ needs.version-setup-matrix.outputs.version }}\n"
          BODY="$BODY⏰ Timestamp: ${{ needs.version-setup-matrix.outputs.timestamp }}\n"
          BODY="$BODY📝 Commit: ${{ github.sha }}\n\n"
          
          BODY="$BODY🎯 Three-Phase Pipeline Results:\n"
          BODY="$BODY┌─────────────────────────────────────────────────────────────────────────────────────┐\n"
          BODY="$BODY│ PHASE 1 - INITIALIZATION MATRICES (3 Separate Matrices)                            │\n"
          BODY="$BODY└─────────────────────────────────────────────────────────────────────────────────────┘\n"
          
          if [ "${{ needs.version-setup-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ 🧱 Version Setup Matrix: Success\n"
          else
            BODY="$BODY❌ 🧱 Version Setup Matrix: ${{ needs.version-setup-matrix.result }}\n"
          fi
          
          if [ "${{ needs.parse-commit-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ 🔍 Parse Commit Matrix: Success\n"
          else
            BODY="$BODY❌ 🔍 Parse Commit Matrix: ${{ needs.parse-commit-matrix.result }}\n"
          fi
          
          if [ "${{ needs.validate-secrets-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ 🔐 Validate Secrets Matrix: Success\n"
          else
            BODY="$BODY❌ 🔐 Validate Secrets Matrix: ${{ needs.validate-secrets-matrix.result }}\n"
          fi
          
          BODY="$BODY\n┌─────────────────────────────────────────────────────────────────────────────────────┐\n"
          BODY="$BODY│ PHASE 2 - BUILD MATRICES (Parallel after Phase 1)                                  │\n"
          BODY="$BODY└─────────────────────────────────────────────────────────────────────────────────────┘\n"
          
          if [ "${{ needs.patch-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ 🏖️ Patch Matrix: Success\n"
          elif [ "${{ needs.patch-matrix.result }}" == "failure" ]; then
            BODY="$BODY❌ 🏖️ Patch Matrix: Failed\n"
          elif [ "${{ needs.patch-matrix.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ 🏖️ Patch Matrix: Skipped\n"
          fi
          
          if [ "${{ needs.release-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ 🚀 Release Matrix: Success\n"
          elif [ "${{ needs.release-matrix.result }}" == "failure" ]; then
            BODY="$BODY❌ 🚀 Release Matrix: Failed\n"
          elif [ "${{ needs.release-matrix.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ 🚀 Release Matrix: Skipped\n"
          fi
          
          if [ "${{ needs.standard-matrix.result }}" == "success" ]; then
            BODY="$BODY✅ 📦 Standard Matrix: Success\n"
          elif [ "${{ needs.standard-matrix.result }}" == "failure" ]; then
            BODY="$BODY❌ 📦 Standard Matrix: Failed\n"
          elif [ "${{ needs.standard-matrix.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ 📦 Standard Matrix: Skipped\n"
          fi
          
          BODY="$BODY\n┌─────────────────────────────────────────────────────────────────────────────────────┐\n"
          BODY="$BODY│ PHASE 3 - PIPELINE STATUS (Final Summary)                                           │\n"
          BODY="$BODY└─────────────────────────────────────────────────────────────────────────────────────┘\n"
          BODY="$BODY✅ 📊 Pipeline Status: Complete\n\n"
          
          BODY="$BODY📌 Commit Flags Detected:\n"
          BODY="$BODY  📱 Patch Android: ${{ needs.parse-commit-matrix.outputs.should_run_patch_android }}\n"
          BODY="$BODY  🍏 Patch iOS: ${{ needs.parse-commit-matrix.outputs.should_run_patch_ios }}\n"
          BODY="$BODY  📱 Release Android: ${{ needs.parse-commit-matrix.outputs.should_run_release_android }}\n"
          BODY="$BODY  🍏 Release iOS: ${{ needs.parse-commit-matrix.outputs.should_run_release_ios }}\n"
          BODY="$BODY  📦 Standard Builds: Always Run\n"
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📧 Send unified status notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 📊 Three-Phase CI/CD Pipeline Status - ${{ needs.version-setup-matrix.outputs.version }}
          body: ${{ steps.notification.outputs.body }}
          to: ${{ secrets.ACCOUNT_HOLDER_EMAIL }}
          from: ${{ secrets.GMAIL_USERNAME }}


      # Optional: Slack notification (uncomment to enable)
      # - name: Send Slack notification
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     channel-id: 'your-channel-id'
      #     text: ${{ steps.notification.outputs.body }}
      #   if: always()