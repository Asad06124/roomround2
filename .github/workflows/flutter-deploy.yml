name: 🚀 Flutter CI/CD Pipeline with Shorebird

# 🚀 CI/CD Pipeline Flow
# ═══════════════════════════════════════════════════════════════════════════════════════
# 🔹 LEVEL 1: INITIALIZATION (Run in Parallel)
# ═══════════════════════════════════════════════════════════════════════════════════════
#        ┌────────────────────┐   ┌────────────────────┐   ┌──────────────────────┐
#        │  Setup & Version   │   │    Parse Commit    │   │   Validate Secrets   │
#        └─────────┬──────────┘   └─────────┬──────────┘   └─────────┬────────────┘
#                  │                        │                        │
#                  └────────────┬───────────┴────────────┬──────────┘
#                               │                        │
#                               ▼                        ▼
# ═══════════════════════════════════════════════════════════════════════════════════════
# 🔹 LEVEL 2: BUILD OPERATIONS (Run in Parallel after Level 1 completes)
# ═══════════════════════════════════════════════════════════════════════════════════════
#     ┌─────────────────────────────┐  ┌─────────────────────────────┐  ┌─────────────────────────────┐
#     │      🏖️ PATCH MATRIX        │  │     🚀 RELEASE MATRIX       │  │   📦 STANDARD BUILD MATRIX  │
#     │                             │  │                             │  │                             │
#     │  ┌─────────────────────────┐ │  │  ┌─────────────────────────┐ │  │  ┌─────────────────────────┐ │
#     │  │   📱 Patch Android     │ │  │  │   📱 Release Android   │ │  │  │   📦 Standard Android  │ │
#     │  └─────────────────────────┘ │  │  └─────────────────────────┘ │  │  └─────────────────────────┘ │
#     │                             │  │                             │  │                             │
#     │  ┌─────────────────────────┐ │  │  ┌─────────────────────────┐ │  │  ┌─────────────────────────┐ │
#     │  │   🍎 Patch iOS         │ │  │  │   🍎 Release iOS       │ │  │  │   📱 Standard iOS      │ │
#     │  └─────────────────────────┘ │  │  └─────────────────────────┘ │  │  └─────────────────────────┘ │
#     │                             │  │                             │  │                             │
#     └─────────────┬───────────────┘  └─────────────┬───────────────┘  └─────────────┬───────────────┘
#                   │                                │                                │
#                   └────────────────┬───────────────┴────────────────┬───────────────┘
#                                    │                                │
#                                    ▼                                ▼
# ═══════════════════════════════════════════════════════════════════════════════════════
# 🔹 LEVEL 3: PIPELINE STATUS (Runs after all Level 2 jobs complete)
# ═══════════════════════════════════════════════════════════════════════════════════════
#                          ┌────────────────────────────┐
#                          │    📊 Pipeline Status      │
#                          └────────────────────────────┘

on:
  push:
    branches:
      - main
      - Asad/chat
  pull_request:
    branches:
      - main
      - Asad/chat

permissions:
  contents: write

env:
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
  FLUTTER_VERSION: '3.24.0'

jobs:
  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 LEVEL 1: INITIALIZATION (Run in Parallel)
  # ═══════════════════════════════════════════════════════════════════════════════════════
  
  # 🔍 Setup & Version Management
  setup-and-version:
    name: 📋 Setup & Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      timestamp: ${{ steps.version-info.outputs.timestamp }}
      build_number: ${{ steps.version-info.outputs.build_number }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 📦 Install cider globally
        run: dart pub global activate cider

      - name: 📊 Get version and timestamp
        id: version-info
        run: |
          # Install dependencies first to ensure pubspec.yaml is accessible
          flutter pub get
          
          # Try multiple methods to get version
          if command -v dart &> /dev/null && dart pub global list | grep -q cider; then
            VERSION=$(dart pub global run cider version 2>/dev/null || echo "")
          fi
          
          # Fallback to parsing pubspec.yaml directly
          if [ -z "$VERSION" ]; then
            VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | tr -d ' ')
          fi
          
          # If still empty, use a default
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0+1"
          fi
          
          # Extract build number
          BUILD_NUMBER=$(echo $VERSION | cut -d '+' -f 2)
          if [ -z "$BUILD_NUMBER" ]; then
            BUILD_NUMBER="1"
          fi
          
          TIMESTAMP=$(date +'%m-%d-%Y %H:%M')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          echo "✅ Version: $VERSION"
          echo "⏰ Timestamp: $TIMESTAMP"
          echo "🔢 Build Number: $BUILD_NUMBER"

  # 🔍 Parse Commit Message
  parse-commit:
    name: 🔍 Parse Commit
    runs-on: ubuntu-latest
    outputs:
      should_run_patch_android: ${{ steps.parse.outputs.should_run_patch_android }}
      should_run_patch_ios: ${{ steps.parse.outputs.should_run_patch_ios }}
      should_run_release_android: ${{ steps.parse.outputs.should_run_release_android }}
      should_run_release_ios: ${{ steps.parse.outputs.should_run_release_ios }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Parse commit message
        id: parse
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "📝 Commit Message: $COMMIT_MESSAGE"
          
          # Initialize all flags as false
          PATCH_ANDROID=false
          PATCH_IOS=false
          RELEASE_ANDROID=false
          RELEASE_IOS=false
          
          # Parse commit message for flags
          if [[ $COMMIT_MESSAGE =~ \[patch-android\] ]]; then
            PATCH_ANDROID=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-ios\] ]]; then
            PATCH_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-both\] ]]; then
            PATCH_ANDROID=true
            PATCH_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[release-android\] ]]; then
            RELEASE_ANDROID=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[release-ios\] ]]; then
            RELEASE_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[release-both\] ]]; then
            RELEASE_ANDROID=true
            RELEASE_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-android-release-ios\] ]]; then
            PATCH_ANDROID=true
            RELEASE_IOS=true
          fi
          
          if [[ $COMMIT_MESSAGE =~ \[patch-ios-release-android\] ]]; then
            PATCH_IOS=true
            RELEASE_ANDROID=true
          fi
          
          # Set outputs
          echo "should_run_patch_android=$PATCH_ANDROID" >> $GITHUB_OUTPUT
          echo "should_run_patch_ios=$PATCH_IOS" >> $GITHUB_OUTPUT
          echo "should_run_release_android=$RELEASE_ANDROID" >> $GITHUB_OUTPUT
          echo "should_run_release_ios=$RELEASE_IOS" >> $GITHUB_OUTPUT
          
          echo "🎯 Parsed Actions:"
          echo "  📱 Patch Android: $PATCH_ANDROID"
          echo "  🍎 Patch iOS: $PATCH_IOS"
          echo "  📱 Release Android: $RELEASE_ANDROID"
          echo "  🍎 Release iOS: $RELEASE_IOS"
          echo "  📦 Standard APK & IPA: Always Run"

  # 🔐 Validate Secrets
  validate-secrets:
    name: 🔐 Validate Secrets
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Check required secrets
        run: |
          echo "🔐 Validating required secrets..."
          
          # Check email secrets
          if [ -z "${{ secrets.GMAIL_USERNAME }}" ] || [ -z "${{ secrets.GMAIL_APP_PASSWORD }}" ] || \
             [ -z "${{ secrets.RECIPIENT_EMAILS }}" ] || [ -z "${{ secrets.ACCOUNT_HOLDER_EMAIL }}" ]; then
            echo "❌ Missing email secrets (GMAIL_USERNAME, GMAIL_APP_PASSWORD, RECIPIENT_EMAILS, ACCOUNT_HOLDER_EMAIL)"
            exit 1
          fi
          
          # Check Android signing secrets
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ] || [ -z "${{ secrets.KEYSTORE_ALIAS }}" ] || \
             [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ] || [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "❌ Missing Android signing secrets"
            exit 1
          fi
          
          echo "✅ All required secrets are present"

  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 LEVEL 2: BUILD OPERATIONS (Run in Parallel after Level 1 completes)
  # ═══════════════════════════════════════════════════════════════════════════════════════

  # 🏖️ Patch Android
  patch-android:
    name: 📱 Patch Android
    needs: [setup-and-version, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_patch_android == 'true' }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🏖️ Setup Shorebird CLI
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ✅ Verify Shorebird Installation
        run: shorebird --version

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🚀 Create Shorebird patch
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: shorebird patch android --release-version latest

      - name: 📤 Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-patch-${{ needs.setup-and-version.outputs.version }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

  # 🏖️ Patch iOS
  patch-ios:
    name: 🍎 Patch iOS
    needs: [setup-and-version, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_patch_ios == 'true' }}
    runs-on: macos-latest
    continue-on-error: true
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🏖️ Setup Shorebird CLI
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ✅ Verify Shorebird Installation
        run: shorebird --version

      - name: 📦 Install dependencies
        run: |
          flutter pub get
          cd ios && pod install

      - name: 🚀 Create Shorebird patch
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: shorebird patch ios --release-version latest

      - name: 📤 Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-patch-${{ needs.setup-and-version.outputs.version }}
          path: build/ios/ipa/*.ipa
          retention-days: 7

  # 🚀 Release Android
  release-android:
    name: 📱 Release Android
    needs: [setup-and-version, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_release_android == 'true' }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🏖️ Setup Shorebird CLI
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ✅ Verify Shorebird Installation
        run: shorebird --version

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🔢 Bump version
        run: |
          dart pub global activate cider
          dart pub global run cider bump build
          NEW_VERSION=$(dart pub global run cider version)
          echo "🆕 New version: $NEW_VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main

      - name: 🔐 Decode Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🚀 Create Shorebird release
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: |
          # Create Shorebird release with APK
          shorebird release android \
          --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
          --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
          --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
          --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
          
          # Create AAB using Shorebird
          shorebird release android --artifact=aab \
          --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
          --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
          --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
          --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}

      - name: 📤 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-release-${{ needs.setup-and-version.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 7

      - name: 📧 Send Release Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 📱 Android Release (Shorebird) - ${{ needs.setup-and-version.outputs.version }}
          body: |
            🚀 Android Release (Shorebird) for version ${{ needs.setup-and-version.outputs.version }}
            ⏰ Build time: ${{ needs.setup-and-version.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            
            ✨ This release supports over-the-air updates via Shorebird
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}

  # 🚀 Release iOS
  release-ios:
    name: 🍎 Release iOS
    needs: [setup-and-version, parse-commit, validate-secrets]
    if: ${{ needs.parse-commit.outputs.should_run_release_ios == 'true' }}
    runs-on: macos-latest
    continue-on-error: true
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🏖️ Setup Shorebird CLI
        uses: shorebirdtech/setup-shorebird@v1
        with:
          cache: true

      - name: ✅ Verify Shorebird Installation
        run: shorebird --version

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: 🏃 Install Fastlane
        run: gem install fastlane

      - name: 📦 Install dependencies
        run: |
          flutter pub get
          cd ios && pod install

      - name: 🔢 Bump version
        run: |
          dart pub global activate cider
          dart pub global run cider bump build
          NEW_VERSION=$(dart pub global run cider version)
          echo "🆕 New version: $NEW_VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main

      - name: 🔐 Fastlane Match Setup
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: 🚀 Create Shorebird release
        env:
          SHOREBIRD_TOKEN: ${{ env.SHOREBIRD_TOKEN }}
        run: shorebird release ios --export-options-plist=ios/Runner/ExportOptions.plist

      - name: ✈️ Deploy to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          bundle exec fastlane beta

      - name: 📤 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-${{ needs.setup-and-version.outputs.version }}
          path: build/ios/ipa/*.ipa
          retention-days: 7

      - name: 📧 Send Release Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 🍎 iOS Release (Shorebird) - ${{ needs.setup-and-version.outputs.version }}
          body: |
            🚀 iOS Release (Shorebird) for version ${{ needs.setup-and-version.outputs.version }}
            ⏰ Build time: ${{ needs.setup-and-version.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            
            ✨ This release supports over-the-air updates via Shorebird
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}

  # 📦 Standard Android Build
  standard-android-build:
    name: 📦 Standard Android Build
    needs: [setup-and-version, parse-commit, validate-secrets]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🔐 Decode Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/upload-keystore.jks

      - name: 🔨 Build Standard Release
        run: |
          flutter build apk --release \
          --dart-define=KEYSTORE_PATH=android/upload-keystore.jks \
          --dart-define=KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }} \
          --dart-define=KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }} \
          --dart-define=KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-standard-${{ needs.setup-and-version.outputs.version }}-${{ needs.setup-and-version.outputs.timestamp }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7

      - name: 📊 Check APK size
        id: apk-size
        run: |
          APK_SIZE=$(stat -c %s build/app/outputs/flutter-apk/app-release.apk)
          echo "📏 APK Size: $(($APK_SIZE / 1024 / 1024)) MB"
          if [ $APK_SIZE -gt 26214400 ]; then
            echo "large_apk=true" >> $GITHUB_OUTPUT
          else
            echo "large_apk=false" >> $GITHUB_OUTPUT
          fi

      - name: ☁️ Upload to Google Drive (if large)
        if: steps.apk-size.outputs.large_apk == 'true'
        uses: Jumbo810/Upload_Github_Artifacts_TO_GDrive@v2.3.1
        with:
          credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          parent_folder_id: 0ANYm83GKkrjgUk9PVA
          target: build/app/outputs/flutter-apk/app-release.apk
          name: app-release-${{ needs.setup-and-version.outputs.version }}-(${{ needs.setup-and-version.outputs.timestamp }}).apk
          override: false
          replace_mode: add_new
        id: drive-upload

      - name: 📧 Send Standard Build Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 📦 Standard Android APK Build - ${{ needs.setup-and-version.outputs.version }}
          body: |
            🔨 Standard Android APK Build (Flutter)
            📋 Version: ${{ needs.setup-and-version.outputs.version }}
            ⏰ Build time: ${{ needs.setup-and-version.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            
            ⚠️ Note: This is a standard Flutter build (No Shorebird OTA support)
            ${{ steps.apk-size.outputs.large_apk == 'true' && format('📥 Download from Google Drive: {0}', steps.drive-upload.outputs.web_view_link) || '' }}
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}
          attachments: build/app/outputs/flutter-apk/app-release.apk

  # 📦 Standard iOS Build
  standard-ios-build:
    name: 📱 Standard iOS Build
    needs: [setup-and-version, parse-commit, validate-secrets]
    runs-on: macos-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 💎 Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true

      - name: 🏃 Install Fastlane
        run: gem install fastlane

      - name: 📦 Install dependencies
        run: |
          flutter pub get
          cd ios && pod install

      - name: 🔐 Fastlane Match Setup
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_AUTHORIZATION: ${{ secrets.MATCH_GIT_AUTH }}
        run: |
          cd ios
          bundle exec fastlane match appstore

      - name: 🔨 Build Standard Release
        run: |
          flutter build ipa --release \
          --export-options-plist=ios/Runner/ExportOptions.plist

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-standard-${{ needs.setup-and-version.outputs.version }}-${{ needs.setup-and-version.outputs.timestamp }}
          path: build/ios/ipa/*.ipa
          retention-days: 7

      - name: 📧 Send Standard Build Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 📱 Standard iOS IPA Build - ${{ needs.setup-and-version.outputs.version }}
          body: |
            🔨 Standard iOS IPA Build (Flutter)
            📋 Version: ${{ needs.setup-and-version.outputs.version }}
            ⏰ Build time: ${{ needs.setup-and-version.outputs.timestamp }}
            📝 Commit: ${{ github.sha }}
            
            ⚠️ Note: This is a standard Flutter build (No Shorebird OTA support)
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}
          attachments: build/ios/ipa/*.ipa

  # ═══════════════════════════════════════════════════════════════════════════════════════
  # 🔹 LEVEL 3: PIPELINE STATUS (Runs after all Level 2 jobs complete)
  # ═══════════════════════════════════════════════════════════════════════════════════════

  # 📊 Pipeline Status
  pipeline-status:
    name: 📊 Pipeline Status
    needs: [setup-and-version, parse-commit, validate-secrets, patch-android, patch-ios, release-android, release-ios, standard-android-build, standard-ios-build]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Prepare status notification
        id: notification
        run: |
          BODY="🚀 CI/CD Pipeline Status Report\n"
          BODY="$BODY━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n"
          BODY="$BODY📋 Version: ${{ needs.setup-and-version.outputs.version }}\n"
          BODY="$BODY⏰ Timestamp: ${{ needs.setup-and-version.outputs.timestamp }}\n"
          BODY="$BODY📝 Commit: ${{ github.sha }}\n\n"
          
          BODY="$BODY🎯 Job Results:\n"
          BODY="$BODY┌─────────────────────────────────────────────────────────────────────────────────────┐\n"
          BODY="$BODY│ LEVEL 1 - INITIALIZATION                                                                │\n"
          BODY="$BODY└─────────────────────────────────────────────────────────────────────────────────────┘\n"
          
          if [ "${{ needs.setup-and-version.result }}" == "success" ]; then
            BODY="$BODY✅ Setup & Version: Success\n"
          else
            BODY="$BODY❌ Setup & Version: Failed\n"
          fi
          
          if [ "${{ needs.parse-commit.result }}" == "success" ]; then
            BODY="$BODY✅ Parse Commit: Success\n"
          else
            BODY="$BODY❌ Parse Commit: Failed\n"
          fi
          
          if [ "${{ needs.validate-secrets.result }}" == "success" ]; then
            BODY="$BODY✅ Validate Secrets: Success\n"
          else
            BODY="$BODY❌ Validate Secrets: Failed\n"
          fi
          
          BODY="$BODY\n┌─────────────────────────────────────────────────────────────────────────────────────┐\n"
          BODY="$BODY│ LEVEL 2 - BUILD OPERATIONS                                                              │\n"
          BODY="$BODY└─────────────────────────────────────────────────────────────────────────────────────┘\n"
          
          # Patch operations
          if [ "${{ needs.patch-android.result }}" == "success" ]; then
            BODY="$BODY✅ Patch Android: Success\n"
          elif [ "${{ needs.patch-android.result }}" == "failure" ]; then
            BODY="$BODY❌ Patch Android: Failed\n"
          elif [ "${{ needs.patch-android.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Patch Android: Skipped\n"
          fi
          
          if [ "${{ needs.patch-ios.result }}" == "success" ]; then
            BODY="$BODY✅ Patch iOS: Success\n"
          elif [ "${{ needs.patch-ios.result }}" == "failure" ]; then
            BODY="$BODY❌ Patch iOS: Failed\n"
          elif [ "${{ needs.patch-ios.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Patch iOS: Skipped\n"
          fi
          
          # Release operations
          if [ "${{ needs.release-android.result }}" == "success" ]; then
            BODY="$BODY✅ Release Android: Success\n"
          elif [ "${{ needs.release-android.result }}" == "failure" ]; then
            BODY="$BODY❌ Release Android: Failed\n"
          elif [ "${{ needs.release-android.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Release Android: Skipped\n"
          fi
          
          if [ "${{ needs.release-ios.result }}" == "success" ]; then
            BODY="$BODY✅ Release iOS: Success\n"
          elif [ "${{ needs.release-ios.result }}" == "failure" ]; then
            BODY="$BODY❌ Release iOS: Failed\n"
          elif [ "${{ needs.release-ios.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Release iOS: Skipped\n"
          fi
          
          # Standard builds
          if [ "${{ needs.standard-android-build.result }}" == "success" ]; then
            BODY="$BODY✅ Standard Android Build: Success\n"
          elif [ "${{ needs.standard-android-build.result }}" == "failure" ]; then
            BODY="$BODY❌ Standard Android Build: Failed\n"
          elif [ "${{ needs.standard-android-build.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Standard Android Build: Skipped\n"
          fi
          
          if [ "${{ needs.standard-ios-build.result }}" == "success" ]; then
            BODY="$BODY✅ Standard iOS Build: Success\n"
          elif [ "${{ needs.standard-ios-build.result }}" == "failure" ]; then
            BODY="$BODY❌ Standard iOS Build: Failed\n"
          elif [ "${{ needs.standard-ios-build.result }}" == "skipped" ]; then
            BODY="$BODY⏭️ Standard iOS Build: Skipped\n"
          fi
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📧 Send unified status notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: 📊 CI/CD Pipeline Status - ${{ needs.setup-and-version.outputs.version }}
          body: ${{ steps.notification.outputs.body }}
          to: ${{ secrets.ACCOUNT_HOLDER_EMAIL }}
          from: ${{ secrets.GMAIL_USERNAME }}

      # Optional: Slack notification (uncomment to enable)
      # - name: Send Slack notification
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     channel-id: 'your-channel-id'
      #     text: ${{ steps.notification.outputs.body }}
      #   if: always()