import 'dart:developer';

import 'package:roomrounds/core/apis/models/tickets/ticket_model.dart';
import 'package:roomrounds/core/constants/imports.dart';
import 'package:roomrounds/module/assigned_task/controller/assigned_task_controller.dart';

class AssignedTasksView extends StatefulWidget {
  const AssignedTasksView({Key? key}) : super(key: key);

  @override
  _AssignedTasksViewState createState() => _AssignedTasksViewState();
}

class _AssignedTasksViewState extends State<AssignedTasksView>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    // Create the TabController with 2 tabs.
    _tabController = TabController(length: 2, vsync: this);
    _tabController.addListener(_handleTabChange);
  }

  void _handleTabChange() {
    if (!_tabController.indexIsChanging) {
      final AssignedTaskController controller =
          Get.find<AssignedTaskController>();
      controller.changeTicketsType(
        _tabController.index == 0
            ? AppStrings.assignedMe
            : AppStrings.assignedTo,
      );
    }
  }

  @override
  void dispose() {
    _tabController.removeListener(_handleTabChange);
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GetBuilder<AssignedTaskController>(
      init: AssignedTaskController(),
      builder: (controller) {
        bool isManager = profileController.isManager;
        int? totalTickets = controller.totalTicketsCount;
        int? urgentTickets = controller.urgentTicketsCount;

        return Scaffold(
          backgroundColor: AppColors.white,
          appBar: CustomAppbar.simpleAppBar(
            context,
            height: 70,
            backButtunColor: AppColors.primary,
            title: isManager ? AppStrings.queries : AppStrings.assignedTasks,
            showMailIcon: true,
            showNotificationIcon: true,
            notificationActive: true,
            titleStyle: context.titleLarge!.copyWith(color: AppColors.primary),
            iconsClor: AppColors.primary,
            isHome: false,
            isBackButtun: true,
          ),
          body: Container(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '${totalTickets ?? 0} ${AppStrings.tickets} / ${urgentTickets ?? 0} ${AppStrings.urgent}',
                  style: context.bodyLarge!.copyWith(
                    color: AppColors.gry,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                SB.h(10),
                TabBar(
                  controller: _tabController,
                  indicatorSize: TabBarIndicatorSize.label,
                  indicatorPadding: const EdgeInsets.only(bottom: 10),
                  tabs: const [
                    Tab(text: 'Assigned me'),
                    Tab(text: 'Assigned to'),
                  ],
                  labelColor: AppColors.primary,
                  unselectedLabelColor: AppColors.gry,
                  indicatorColor: AppColors.primary,
                  indicatorWeight: 2,
                  labelStyle: context.titleSmall!.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                  unselectedLabelStyle: context.titleSmall!.copyWith(
                    fontWeight: FontWeight.w400,
                  ),
                ),
                SB.h(16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      AppStrings.tickets,
                      style: context.titleSmall!.copyWith(
                        color: AppColors.textPrimary,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    CustomeDropDown.simple<String>(
                      context,
                      list: controller.ticketStatusList
                          .map((status) => status.value ?? 'All')
                          .toList(),
                      initialItem: "All",
                      onSelect: controller.changeStatusFilter,
                      closedFillColor: AppColors.lightWhite,
                      borderRadius: 20,
                      showShadow: true,
                      closedShadow: false,
                    ),
                  ],
                ),
                SB.h(16),
                Expanded(
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      _buildTabContent(context, controller, isAssignedMe: true),
                      _buildTabContent(context, controller,
                          isAssignedMe: false),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildTabContent(
      BuildContext context, AssignedTaskController controller,
      {required bool isAssignedMe}) {
    bool dataLoaded = controller.hasOpenTickets;
    if (profileController.isManager) {
      dataLoaded = dataLoaded && controller.hasClosedTickets;
    }
    final formattedTickets =
        controller.TicketsList.map((ticket) => 'Ticket( ${ticket.toJson()},)')
            .join('\n');
    log('All Tickets Size: ${controller.TicketsList.length}\n All Tickets: $formattedTickets');
    return dataLoaded ? _buildTicketsList(context, controller) : CustomLoader();
  }

  Widget _buildTicketsList(
      BuildContext context, AssignedTaskController controller) {
    List<Ticket> allTickets = controller.TicketsList;
    if (allTickets.isEmpty) return _noResultsFound();
    return ListView.builder(
      shrinkWrap: true,
      itemCount: allTickets.length,
      itemBuilder: (context, index) {
        Ticket ticket = allTickets[index];
        bool isManager = profileController.isManager;

        bool showUnderline = !ticket.isClosed! &&
            controller.ticketsType != TicketsType.assignedTo;
        return AssignedTaskComponents.tile(
          context,
          title: ticket.roomName ?? ticket.floorName ?? ticket.assignToName,
          status: ticket.isClosed == false || ticket.isClosed == null
              ? 'Open'
              : ticket.status!,
          isUnderline: showUnderline,
          onStatusPressed: showUnderline
              ? () {
                  controller.onTicketStatusTap(
                    isManager: isManager,
                    ticket: ticket,
                    type: controller.ticketsType,
                  );
                }
              : null,
          onTap: () {
            controller.onTicketTap(
              type: controller.ticketsType,
              ticket: ticket,
              isManager: isManager,
              isClosed: ticket.isClosed!,
            );
          },
          fillColor: AppColors.getStatusColor(ticket.status ?? 'Open'),
        );
      },
    );
  }

  Widget _noResultsFound() {
    return Center(
      child: Text(AppStrings.noTicketsFound),
    );
  }
}
